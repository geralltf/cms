/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as p from "react";
import o from "prop-types";
import { saveAs as l } from "@progress/kendo-file-saver";
import { isWorkbookOptions as d, toDataURL as c, workbookOptions as m } from "./ooxml/workbook.mjs";
import { validatePackage as y } from "@progress/kendo-react-common";
import { packageMetadata as u } from "./package-metadata.mjs";
const a = class a extends p.Component {
  constructor(s) {
    super(s), this.saveFile = (t) => {
      l(t, this.props.fileName, {
        forceProxy: this.props.forceProxy,
        proxyURL: this.props.proxyURL
      });
    }, this.extractColumns = (t, r = 0) => Array.isArray(t) ? t.map((i) => this.extractChild(i, r)) : [t, this.extractChild(t, r)], this.extractChild = (t, r = 0) => p.isValidElement(t) ? {
      ...t.props,
      width: t.props.width && parseInt(`${t.props.width}`, 10),
      level: r,
      children: t.props.children && this.extractColumns(t.props.children, r + 1)
    } : {
      ...t,
      level: r,
      children: t.children && this.extractColumns(t.children, r + 1)
    }, this.getExportData = (t) => {
      let r;
      return t ? Array.isArray(t) ? r = {
        data: t
      } : r = t : r = {
        data: this.props.data,
        group: this.props.group
      }, r;
    }, y(u), this.save = this.save.bind(this), this.toDataURL = this.toDataURL.bind(this), this.workbookOptions = this.workbookOptions.bind(this);
  }
  /**
   * Saves the data to Excel.
   *
   * @param exportData - An optional parameter. Can be the data that will be exported or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).
   * @param columns - An optional parameter. If present, it will be used instead of the columns prop or the child column components.
   */
  save(s, t) {
    this.toDataURL(s, t).then((...r) => {
      this.props.onExportComplete && this.props.onExportComplete.call(void 0, { target: this }), this.saveFile(...r);
    });
  }
  /**
   * Returns a promise which will be resolved with the file data URI.
   *
   * @param exportData - The optional data or the [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.
   * @param externalColumns - The optional columns that will be used.
   * @returns {Promise<string>} - The promise that will be resolved by the file data URI.
   */
  toDataURL(s, t) {
    const r = d(s) ? s : this.workbookOptions(s, t);
    return c(r);
  }
  /**
   * Based on the specified columns and data, returns [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).
   *
   * @param exportData - The optional data that will be exported.
   * @param externalColumns - The optional columns that will be used.
   * @returns {WorkbookOptions} - The workbook options.
   */
  // tslint:enable:max-line-length
  workbookOptions(s, t) {
    const r = this.getExportData(s), i = this.props.children, n = i && i.type && i.type.displayName === "KendoReactGrid" && i.props && p.Children.toArray(i.props.children), h = this.extractColumns(
      n || t || this.props.columns || p.Children.toArray(i)
    );
    return m({
      columns: h,
      data: r.data,
      group: r.group,
      filterable: this.props.filterable,
      creator: this.props.creator,
      date: this.props.date,
      dir: this.props.dir,
      hierarchy: this.props.hierarchy,
      paddingCellOptions: this.props.paddingCellOptions,
      headerPaddingCellOptions: this.props.headerPaddingCellOptions,
      collapsible: this.props.collapsible
    });
  }
  /**
   * @hidden
   */
  render() {
    return this.props.children || null;
  }
};
a.propTypes = {
  children: o.any,
  columns: o.arrayOf(o.any),
  creator: o.string,
  data: o.any,
  date: o.any,
  filterable: o.bool,
  fileName: o.string,
  forceProxy: o.bool,
  group: o.any,
  headerPaddingCellOptions: o.any,
  paddingCellOptions: o.any,
  proxyURL: o.string,
  dir: o.string,
  hierarchy: o.bool,
  collapsible: o.bool
}, a.defaultProps = {
  fileName: "Export.xlsx",
  forceProxy: !1,
  collapsible: !1
};
let e = a;
export {
  e as ExcelExport
};
