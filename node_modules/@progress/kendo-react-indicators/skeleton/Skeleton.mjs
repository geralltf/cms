/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import s from "prop-types";
import { validatePackage as f, classNames as k } from "@progress/kendo-react-common";
import { packageMetadata as y } from "../package-metadata.mjs";
const r = e.forwardRef((t, i) => {
  f(y);
  const {
    className: l,
    style: m
  } = t, n = e.useRef(null), u = e.useCallback(
    () => {
      n.current && n.current.focus();
    },
    []
  );
  e.useImperativeHandle(i, () => ({
    element: n.current,
    focus: u
  }));
  const o = e.useMemo(
    () => t.shape || c.shape,
    [t.shape]
  ), a = e.useMemo(
    () => t.animation === !1 ? !1 : t.animation || c.animation,
    [t.animation]
  ), p = e.useMemo(
    () => k(
      "k-skeleton",
      {
        "k-skeleton-circle": o === "circle",
        "k-skeleton-rect": o === "rectangle",
        "k-skeleton-text": o === "text",
        "k-skeleton-pulse": typeof a == "object" && a.type === "pulse",
        "k-skeleton-wave": typeof a == "object" && a.type === "wave" || a === !0
      },
      l
    ),
    [o, a, l]
  );
  return /* @__PURE__ */ e.createElement(
    "span",
    {
      ref: n,
      className: p,
      style: m
    }
  );
});
r.propTypes = {
  className: s.string,
  style: s.object,
  animation: s.shape({
    type: s.oneOf(["wave", "pulse"])
  }),
  shape: s.oneOf(["circle", "rectangle", "text"])
};
const c = {
  shape: "text",
  animation: { type: "pulse" }
};
r.displayName = "KendoSkeleton";
export {
  r as Skeleton
};
