/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import * as React_2 from 'react';

/**
 * Represents the [KendoReact Badge component]({% slug overview_badge %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Badge>99+</Badge>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const Badge: React_2.ForwardRefExoticComponent<BadgeProps & React_2.RefAttributes<BadgeHandle | null>>;

/**
 * Specifies the horizontal and vertical alignment of the Badge in a relation to the element.
 */
export declare interface BadgeAlign {
    /**
     * Defines the possible horizontal alignment of the Badge.
     *
     * The available values are:
     * - `start`&mdash;Uses the start point of the parent element.
     * - `end`(Default)&mdash;Uses the end point of the parent element.
     */
    horizontal: 'start' | 'end';
    /**
     * Defines the possible vertical alignment of the Badge.
     *
     * The available values are:
     * - `top`(Default)&mdash;Uses the top point of the parent element.
     * - `bottom`&mdash;Uses the bottom point of the parent element.
     */
    vertical: 'top' | 'bottom';
}

/**
 * Represents the [KendoReact BadgeContainer component]({% slug overview_badge %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <BadgeContainer>
 *           <Avatar shape="circle" type="image">
 *               <img src={'https://demos.telerik.com/kendo-ui/content/web/Customers/RICSU.jpg'} />
 *           </Avatar>
 *           <Badge cornerPlacement="edge" position="topEnd">
 *       </BadgeContainer>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const BadgeContainer: React_2.ForwardRefExoticComponent<BadgeContainerProps & React_2.RefAttributes<BadgeContainerHandle | null>>;

/**
 * The BadgeContainer ref.
 */
export declare interface BadgeContainerHandle {
    /**
     * The BadgeContainer element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the BadgeContainer.
     */
    focus: () => void;
}

/**
 * Represents the props of the [KendoReact BadgeContainer component]({% slug overview_badge %}).
 */
export declare interface BadgeContainerProps {
    /**
     * The React elements that will be rendered inside the BadgeContainer.
     */
    children?: React.ReactNode;
    /**
     * Specifies a list of CSS classes that will be added to the BadgeContainer.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Sets additional CSS styles to the BadgeContainer.
     */
    style?: React.CSSProperties;
}

/**
 * Specifies the appearance fill style of the Badge.
 *
 * The possible values are:
 * * `solid` (Default)
 * * `outline`
 *
 */
export declare type BadgeFill = 'solid' | 'outline';

/**
 * The Badge ref.
 */
export declare interface BadgeHandle {
    /**
     * The Badge element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the Badge.
     */
    focus: () => void;
}

/**
 * Specifies the position of the Badge relative to the edge of the container element.
 *
 * The possible values are:
 * * `edge` (Default)&mdash;The center of the Badge is positioned on the edge of the container element.
 * * `outside`&mdash;The Badge is entirely positioned outside the edge of the container element.
 * * `inside`&mdash;The Badge is entirely positioned inside the edge of the the container element.
 *
 */
export declare type BadgePosition = 'edge' | 'outside' | 'inside';

/**
 * Represents the props of the [KendoReact Badge component]({% slug overview_badge %}).
 */
export declare interface BadgeProps {
    /**
     * The React elements that will be rendered inside the Badge.
     */
    children?: React.ReactNode;
    /**
     * Specifies a list of CSS classes that will be added to the Badge.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Sets additional CSS styles to the Badge.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the size of the Badge.
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     * * null&mdash;Does not set a size `className`
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Specifies the roundness of the Badge.
     *
     * The possible values are:
     * - small
     * - medium (Default)
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Specifies the appearance fill style of the Badge.
     *
     * The possible values are:
     * * `solid` (Default)
     * * `outline`
     * * null&mdash;Does not set a fillMode `className`
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'outline';
    /**
     * Specifies the theme color of the Badge.
     *
     * The possible values are:
     * * `base` &mdash;Applies coloring based on the `base` theme color.
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `inherit`&mdash; Applies inherited coloring value.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverse theme color.
     * * null&mdash;Does not set a themeColor `className`.
     *
     * @default `primary`
     */
    themeColor?: null | 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse' | 'inherit';
    /**
     * Specifies the alignment of the Badge.
     *
     * The possible keys are:
     * * `horizontal`&mdash; Defines the possible horizontal alignment of the Badge.
     *   * `start`&mdash;Uses the start point of the parent element.
     *   * `end`(Default)&mdash;Uses the end point of the parent element.
     * * `vertical`&mdash; Defines the possible vertical alignment of the Badge.
     *   * `top`(Default)&mdash;Uses the top point of the parent element.
     *   * `bottom`&mdash;Uses the bottom point of the parent element.
     *
     */
    align?: {
        /**
         * Defines the possible horizontal alignment of the Badge.
         *
         * The available values are:
         * - `start`&mdash;Uses the start point of the parent element.
         * - `end`(Default)&mdash;Uses the end point of the parent element.
         */
        horizontal: 'start' | 'end';
        /**
         * Defines the possible vertical alignment of the Badge.
         *
         * The available values are:
         * - `top`(Default)&mdash;Uses the top point of the parent element.
         * - `bottom`&mdash;Uses the bottom point of the parent element.
         */
        vertical: 'top' | 'bottom';
    };
    /**
     * Specifies the position of the Badge relative to the edge of the container element.
     *
     * The possible values are:
     * * `edge` (Default)&mdash;The center of the Badge is positioned on the edge of the container element.
     * * `outside`&mdash;The Badge is entirely positioned outside the edge of the container element.
     * * `inside`&mdash;The Badge is entirely positioned inside the edge of the the container element.
     *
     * @default `edge`
     */
    position?: 'edge' | 'outside' | 'inside';
    /**
     * Specifies wether or not to render additional "cutout" border around the Badge.
     *
     * The possible values are:
     * * `true`
     * * `false` (Default)
     *
     */
    cutoutBorder?: boolean;
}

/**
 * Specifies the size of the Badge.
 *
 * The possible values are:
 * * `small`
 * * `medium` (Default)
 * * `large`
 *
 */
export declare type BadgeSize = 'small' | 'medium' | 'large';

/**
 * Specifies the theme color of the Badge.
 *
 * The possible values are:
 * * `base` &mdash;Applies coloring based on the `base` theme color.
 * * `primary` (Default)&mdash;Applies coloring based on `primary` theme color.
 * * `secondary`&mdash;Applies coloring based on `secondary` theme color.
 * * `tertiary`&mdash; Applies coloring based on `tertiary` theme color.
 * * `inherit`&mdash; Applies inherited coloring value.
 * * `info`&mdash;Applies coloring based on `info` theme color.
 * * `success`&mdash; Applies coloring based on `success` theme color.
 * * `warning`&mdash; Applies coloring based on `warning` theme color.
 * * `error`&mdash; Applies coloring based on `error` theme color.
 * * `dark`&mdash; Applies coloring based on `dark` theme color.
 * * `light`&mdash; Applies coloring based on `light` theme color.
 * * `inverse`&mdash; Applies coloring based on `inverse` theme color.
 *
 */
export declare type BadgeThemeColor = 'base' | 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse' | 'inherit';

/**
 * Represents the [KendoReact Loader component]({% slug overview_loader %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Loader />
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const Loader: React_2.ForwardRefExoticComponent<LoaderProps & React_2.RefAttributes<LoaderHandle | null>>;

/**
 * The Loader ref.
 */
export declare interface LoaderHandle {
    /**
     * The Loader element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the Loader.
     */
    focus: () => void;
}

/**
 * Represents the props of the [KendoReact Loader component]({% slug overview_loader %}).
 */
export declare interface LoaderProps {
    /**
     * Specifies a list of CSS classes that will be added to the Loader.
     */
    className?: string;
    /**
     * Sets additional CSS styles to the Loader.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the size of the Loader.
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     *
     */
    size?: LoaderSize;
    /**
     * Specifies the theme color of the Loader.
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverse theme color.
     */
    themeColor?: LoaderThemeColor;
    /**
     * Specifies the Loader animation type.
     *
     * The possible values are:
     * - `pulsing` (default)
     * - `infinite-spinner`
     * - `converging-spinner`
     */
    type?: LoaderType;
}

/**
 * Specifies the size of the Loader
 * ([see example]({% slug appearance_loader %}#toc-size)).
 *
 * The possible values are:
 * * `small`
 * * `medium` (Default)
 * * `large`
 *
 */
export declare type LoaderSize = 'small' | 'medium' | 'large';

/**
 * Specifies the theme color of the Loader.
 * ([see example]({% slug appearance_loader %}#toc-theme-color)).
 *
 * The possible values are:
 * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
 * * `secondary`&mdash;Applies coloring based on secondary theme color.
 * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
 * * `info`&mdash;Applies coloring based on info theme color.
 * * `success`&mdash; Applies coloring based on success theme color.
 * * `warning`&mdash; Applies coloring based on warning theme color.
 * * `error`&mdash; Applies coloring based on error theme color.
 * * `dark`&mdash; Applies coloring based on dark theme color.
 * * `light`&mdash; Applies coloring based on light theme color.
 * * `inverse`&mdash; Applies coloring based on inverted theme color.
 *
 */
export declare type LoaderThemeColor = 'primary' | 'secondary' | 'tertiary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | 'inverse';

/**
 * Specifies the Loader animation type.
 *
 * The possible values are:
 * - `pulsing` (default)
 * - `infinite-spinner`
 * - `converging-spinner`
 *
 */
export declare type LoaderType = 'pulsing' | 'infinite-spinner' | 'converging-spinner';

/**
 * Represents the [KendoReact Skeleton component]({% slug overview_skeleton %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   return (
 *       <Skeleton shape={'text'} style={{width: 200}}/>
 *   );
 * };
 *    ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const Skeleton: React_2.ForwardRefExoticComponent<SkeletonProps & React_2.RefAttributes<SkeletonHandle | null>>;

/**
 * Specifies the animation settings of the Skeleton.
 */
export declare interface SkeletonAnimation {
    /**
     * Specifies the type of the Skeleton animation. Defaults to `pulse`.
     */
    type?: 'wave' | 'pulse';
}

/**
 * The Skeleton ref.
 */
export declare interface SkeletonHandle {
    /**
     * The Skeleton element.
     */
    element: HTMLSpanElement | null;
    /**
     * Focus the Skeleton.
     */
    focus: () => void;
}

/**
 * Represents the props of the [KendoReact Skeleton component]({% slug overview_skeleton %}).
 */
export declare interface SkeletonProps {
    /**
     * Specifies a list of CSS classes that will be added to the Skeleton.
     */
    className?: string;
    /**
     * Sets additional CSS styles to the Skeleton.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the animation settings of the Skeleton.
     *
     * The possible keys are:
     * * `type`&mdash;Defines the type of the Skeleton animation.
     *   * `wave`&mdash;Shows wave animation effect.
     *   * `pulse`(Default)&mdash;Shows pulse animation effect.
     *
     * To disable the animation, set the property to `false`.
     *
     */
    animation?: boolean | SkeletonAnimation;
    /**
     * Specifies the shape of the Skeleton.
     *
     * The possible values are:
     * * `circle`&mdash;Renders a circular Skeleton.
     * * `text`(Default)&mdash;Renders a line Skeleton.
     * * `rectangle`&mdash;Renders a rectangular Skeleton.
     *
     */
    shape?: SkeletonShape;
}

/**
 * Specifies the shape of the Skeleton.
 *
 * The possible values are:
 * * `circle`&mdash;Renders a circular Skeleton.
 * * `text`(Default)&mdash;Renders a line Skeleton.
 * * `rectangle`&mdash;Renders a rectangular Skeleton.
 *
 */
export declare type SkeletonShape = 'circle' | 'text' | 'rectangle';

export { }
