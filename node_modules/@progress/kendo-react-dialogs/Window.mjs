/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as h from "react";
import * as F from "react-dom";
import o from "prop-types";
import { WindowTitleBar as R } from "./WindowTitlebar.mjs";
import { keepFocusInContainer as x, Keys as r, dispatchEvent as p, validatePackage as U, shouldShowValidationUI as N, ZIndexContext as W, classNames as k, Draggable as H, WatermarkOverlay as z, canUseDOM as _, createPropsContext as O, withIdHOC as Z, withPropsContext as P } from "@progress/kendo-react-common";
import { ResizeHandlers as K } from "./WindowResizeHandlers.mjs";
import { MiddleLayerOptimization as X } from "./MiddleLayerOptimization.mjs";
import { windowStage as i } from "./StageEnum.mjs";
import { packageMetadata as M } from "./package-metadata.mjs";
import { WindowActionsBar as y } from "./WindowActionsBar.mjs";
import { DEFAULT_DIALOGS_ZINDEX as A, ZINDEX_DIALOGS_STEP as B, DATA_DIALOGS_ID as G } from "./constants.mjs";
import { getMaxZIndex as v } from "./utils.mjs";
const u = 300, w = 300, m = 120, S = 100, d = 5, c = class c extends h.Component {
  constructor(s) {
    super(s), this.context = 0, this.draggable = null, this.offSetCoordinates = { x: 0, y: 0 }, this.titleId = this.generateTitleId(), this.mounted = !1, this.showLicenseWatermark = !1, this.activeElement = null, this.onKeyDown = (t) => {
      if (this.props.modal && x(t, this.element), t.target !== t.currentTarget)
        return;
      const e = this.props.minWidth || m, n = this.props.minHeight || S;
      if ((t.metaKey || t.ctrlKey) && this.props.resizable) {
        switch (t.keyCode) {
          case r.up:
            t.preventDefault(), n <= this.height - d && this.setState({ height: this.height - d });
            break;
          case r.down:
            t.preventDefault(), this.setState({ height: this.height + d });
            break;
          case r.left:
            e <= this.width - d && this.setState({ width: this.width - d });
            break;
          case r.right:
            this.setState({ width: this.width + d });
            break;
          default:
            return;
        }
        this.dispatchMoveEvent(this.props.onResize, t, !1, void 0);
        return;
      }
      if (t.altKey) {
        switch (t.keyCode) {
          case r.up:
            this.windowStage === i.MINIMIZED ? (this.handleRestore(t), p(this.props.onStageChange, t, this, { state: i.DEFAULT })) : this.windowStage === i.DEFAULT && (this.handleFullscreen(t), p(this.props.onStageChange, t, this, { state: i.FULLSCREEN }));
            break;
          case r.down:
            this.windowStage === i.FULLSCREEN ? (this.handleRestore(t), p(this.props.onStageChange, t, this, { state: i.DEFAULT })) : this.windowStage === i.DEFAULT && (this.handleMinimize(t), p(this.props.onStageChange, t, this, { state: i.MINIMIZED }));
            break;
        }
        return;
      }
      if (!t.ctrlKey)
        switch (t.keyCode) {
          case r.esc:
            this.props.onClose && this.handleCloseWindow(t);
            return;
          case r.up:
            this.setState({ top: this.state.top - d });
            break;
          case r.down:
            this.setState({ top: this.state.top + d });
            break;
          case r.left:
            this.setState({ left: this.state.left - d });
            break;
          case r.right:
            this.setState({ left: this.state.left + d });
            break;
          default:
            return;
        }
      this.dispatchMoveEvent(this.props.onMove, t, !1, void 0);
    }, this.onPress = (t) => {
      const e = t.event;
      this.windowCoordinatesState.differenceLeft = e.pageX - this.left, this.windowCoordinatesState.differenceTop = e.pageY - this.top;
    }, this.onDrag = (t) => {
      const e = t.event;
      e.originalEvent.preventDefault(), this.windowStage !== i.FULLSCREEN && this.props.draggable && (this.setState({
        top: Math.max(e.pageY - this.windowCoordinatesState.differenceTop, 0),
        left: e.pageX - this.windowCoordinatesState.differenceLeft,
        isDragging: !0
      }), this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e, !0, !1));
    }, this.onRelease = (t) => {
      const e = t.event;
      this.windowStage !== i.FULLSCREEN && this.props.draggable && this.props.onMove && this.dispatchMoveEvent(this.props.onMove, e, !0, !0), this.setState({
        isDragging: !1
      });
    }, this.onFocus = () => {
      this._blurTimeout ? (clearTimeout(this._blurTimeout), this._blurTimeout = void 0) : this.setState({
        focused: !0,
        zIndex: v(this.getCurrentZIndex(), this.getDocument(), this._id)
      });
    }, this.onBlur = () => {
      clearTimeout(this._blurTimeout);
      const t = this.getWindow();
      t && (this._blurTimeout = t.setTimeout(() => {
        this.mounted && this.setState({ focused: !1 }), this._blurTimeout = void 0;
      }));
    }, this.getInitialTop = () => {
      if (this.props.top !== void 0)
        return this.props.top;
      if (this.props.initialTop !== void 0)
        return this.props.initialTop;
      let t = w;
      if (this.props.height !== void 0 ? t = this.props.height : this.props.initialHeight !== void 0 && (t = this.props.initialHeight), this.props.appendTo)
        return this.props.appendTo.offsetHeight / 2 - t / 2;
      const e = this.getWindow();
      return e ? e.innerHeight / 2 - t / 2 : 0;
    }, this.getInitialLeft = () => {
      if (this.props.left !== void 0)
        return this.props.left;
      if (this.props.initialLeft !== void 0)
        return this.props.initialLeft;
      let t = u;
      if (this.props.width !== void 0 ? t = this.props.width : this.props.initialWidth !== void 0 && (t = this.props.initialWidth), this.props.appendTo)
        return this.props.appendTo.offsetWidth / 2 - t / 2;
      const e = this.getWindow();
      return e ? e.innerWidth / 2 - t / 2 : 0;
    }, this.getInitialWidth = () => {
      let t = u;
      return this.props.width !== void 0 ? t = this.props.width : this.props.initialWidth !== void 0 && (t = this.props.initialWidth), t;
    }, this.getInitialHeight = () => {
      let t = w;
      return this.props.height !== void 0 ? t = this.props.height : this.props.initialHeight !== void 0 && (t = this.props.initialHeight), t;
    }, this.handleMinimize = (t) => {
      t.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height, this.setState({
        stage: i.MINIMIZED,
        height: 0
      }), p(this.props.onStageChange, t, this, { state: i.MINIMIZED });
    }, this.handleFullscreen = (t) => {
      t.preventDefault(), this.windowCoordinatesState.leftBeforeAction = this.left, this.windowCoordinatesState.topBeforeAction = this.top, this.windowCoordinatesState.widthBeforeAction = this.width, this.windowCoordinatesState.heightBeforeAction = this.height;
      const e = this.getWindow(), n = e ? e.innerWidth : 0, a = e ? e.innerHeight : 0;
      this.setState({
        left: 0,
        top: 0,
        width: this.props.appendTo ? this.props.appendTo.offsetWidth : n,
        height: this.props.appendTo ? this.props.appendTo.offsetHeight : a,
        stage: i.FULLSCREEN
      }), p(this.props.onStageChange, t, this, { state: i.FULLSCREEN });
    }, this.handleRestore = (t) => {
      t.preventDefault(), this.windowStage === i.FULLSCREEN ? this.setState({
        stage: i.DEFAULT,
        left: this.windowCoordinatesState.leftBeforeAction,
        top: this.windowCoordinatesState.topBeforeAction,
        width: this.windowCoordinatesState.widthBeforeAction,
        height: this.windowCoordinatesState.heightBeforeAction
      }) : this.windowStage === i.MINIMIZED && this.setState({
        stage: i.DEFAULT,
        height: this.windowCoordinatesState.heightBeforeAction
      }), p(this.props.onStageChange, t, this, { state: i.DEFAULT });
    }, this.handleCloseWindow = (t) => {
      t.preventDefault(), p(this.props.onClose, t, this, { state: void 0 }), setTimeout(() => {
        this.activeElement && this.activeElement.focus();
      });
    }, this.handleDoubleClick = (t) => {
      this.windowStage === i.FULLSCREEN || this.windowStage === i.MINIMIZED ? this.handleRestore(t) : this.handleFullscreen(t);
    }, this.handleResize = (t, e) => {
      const n = this.props.appendTo ? t.pageX - this.offSetCoordinates.x : t.pageX, a = this.props.appendTo ? t.pageY - this.offSetCoordinates.y : t.pageY, f = this.width, l = this.height, C = this.props.minWidth || m, D = this.props.minHeight || S, I = this.top - a, T = this.left - n;
      let L = n - this.left, b = a - this.top;
      const g = Object.assign({}, this.state, { isDragging: !e.end });
      e.direction.indexOf("n") >= 0 && D - (l + I) < 0 && (this.top > 0 && (g.height = l + I), g.top = a), e.direction.indexOf("s") >= 0 && D - b < 0 && (g.height = b), e.direction.indexOf("w") >= 0 && C - (f + T) < 0 && (this.left > 0 && (g.width = f + T), g.left = n), e.direction.indexOf("e") >= 0 && C - L < 0 && (g.width = L), this.setState(g), this.dispatchMoveEvent(this.props.onResize, t, !0, e.end);
    }, this.dispatchMoveEvent = (t, e, n, a) => {
      t && t.call(void 0, {
        nativeEvent: e.nativeEvent ? e.nativeEvent : e.originalEvent,
        drag: n,
        end: a,
        target: this,
        left: this.state.left,
        top: this.state.top,
        width: this.state.width,
        hight: this.state.height,
        height: this.state.height
      });
    }, this.handleBrowserWindowResize = () => {
      if (this.windowStage === i.FULLSCREEN) {
        const t = this.getWindow(), e = t ? t.innerWidth : 0, n = t ? t.innerHeight : 0;
        this.setState({
          width: this.props.appendTo ? this.props.appendTo.offsetWidth : e,
          height: this.props.appendTo ? this.props.appendTo.offsetHeight : n
        });
      }
    }, this.getCurrentZIndex = () => !this.state || this.context === void 0 ? this.context ? this.context : A : this.state.zIndex > (this.context ? this.context + B : 0) ? this.state.zIndex : this.context + B, this.getDocument = () => this.props.appendTo ? this.props.appendTo.ownerDocument : document, this.getWindow = () => {
      const t = this.getDocument();
      return t && t.defaultView;
    }, U(M), this.showLicenseWatermark = N(M), this.state = {
      stage: this.props.stage || i.DEFAULT,
      isDragging: !1,
      top: 0,
      left: 0,
      width: u,
      height: w,
      focused: !0,
      zIndex: A
    }, this.activeElement = document.activeElement;
  }
  get _id() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.element && this.element.focus();
    const s = this.getWindow();
    s && s.addEventListener("resize", this.handleBrowserWindowResize), this.setState({
      stage: this.props.stage || i.DEFAULT,
      isDragging: !1,
      top: this.getInitialTop(),
      left: this.getInitialLeft(),
      width: this.getInitialWidth(),
      height: this.getInitialHeight(),
      focused: !0,
      zIndex: v(this.getCurrentZIndex(), this.getDocument(), this._id)
    }), this.windowCoordinatesState = {
      leftBeforeAction: this.getInitialLeft(),
      topBeforeAction: this.getInitialTop(),
      widthBeforeAction: this.getInitialWidth(),
      heightBeforeAction: this.getInitialHeight()
    };
    const t = this.getDocument();
    if (this.props.appendTo && t) {
      let e = this.props.appendTo.getBoundingClientRect(), n = t.body.getBoundingClientRect();
      this.offSetCoordinates.x = e.left - n.left, this.offSetCoordinates.y = e.top - n.top;
    }
    this.mounted = !0;
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    const s = this.getWindow();
    s && s.removeEventListener("resize", this.handleBrowserWindowResize), this.mounted = !1;
  }
  /**
   * @hidden
   */
  componentDidUpdate() {
    const s = this.getDocument();
    if (this.props.appendTo && s) {
      let t = this.props.appendTo.getBoundingClientRect(), e = s.body.getBoundingClientRect();
      this.offSetCoordinates.x = t.left - e.left, this.offSetCoordinates.y = t.top - e.top;
    }
    this.mounted = !0;
  }
  /**
   * @hidden
   */
  render() {
    const s = h.Children.toArray(this.props.children), t = this.getContent(s), e = this.getActionBar(s), n = this.getCurrentZIndex(), a = k(
      "k-window",
      this.props.className,
      {
        [`k-window-${this.props.themeColor}`]: this.props.themeColor,
        "k-window-minimized": this.state.stage === "MINIMIZED",
        "k-window-focused": this.state.focused
      }
    ), f = /* @__PURE__ */ h.createElement(W.Provider, { value: n }, /* @__PURE__ */ h.createElement(h.Fragment, null, this.props.modal && /* @__PURE__ */ h.createElement(
      "div",
      {
        className: "k-overlay",
        style: {
          zIndex: n,
          ...this.props.overlayStyle
        }
      }
    ), /* @__PURE__ */ h.createElement(
      "div",
      {
        id: this.props.id,
        [G]: this._id,
        tabIndex: 0,
        role: "dialog",
        "aria-labelledby": this.titleId,
        onFocus: this.onFocus,
        onBlur: this.onBlur,
        onKeyDown: this.onKeyDown,
        ref: (l) => {
          this.windowElement = l, this.element = l;
        },
        className: a,
        style: {
          top: this.top,
          left: this.left,
          width: this.width,
          height: this.height || "",
          zIndex: n,
          ...this.props.style
        }
      },
      /* @__PURE__ */ h.createElement(
        X,
        {
          shouldUpdateOnDrag: this.props.shouldUpdateOnDrag || !1,
          isDragging: this.state.isDragging
        },
        /* @__PURE__ */ h.createElement(
          H,
          {
            onPress: this.onPress,
            onDrag: this.onDrag,
            onRelease: this.onRelease,
            ref: (l) => this.draggable = l
          },
          /* @__PURE__ */ h.createElement(
            R,
            {
              stage: this.windowStage,
              onDoubleClick: this.props.doubleClickStageChange ? this.handleDoubleClick : void 0,
              onMinimizeButtonClick: this.handleMinimize,
              onFullScreenButtonClick: this.handleFullscreen,
              onRestoreButtonClick: this.handleRestore,
              onCloseButtonClick: this.handleCloseWindow,
              closeButton: this.props.closeButton,
              minimizeButton: this.props.minimizeButton,
              maximizeButton: this.props.maximizeButton,
              restoreButton: this.props.restoreButton,
              id: this.titleId
            },
            this.props.title
          )
        ),
        this.windowStage !== i.MINIMIZED ? /* @__PURE__ */ h.createElement(h.Fragment, null, /* @__PURE__ */ h.createElement("div", { className: "k-window-content" }, t), e) : null,
        this.windowStage === i.DEFAULT && this.props.resizable ? /* @__PURE__ */ h.createElement(K, { onResize: this.handleResize }) : null
      ),
      this.showLicenseWatermark && /* @__PURE__ */ h.createElement(z, null)
    )));
    return _ ? this.props.appendTo !== null ? F.createPortal(f, this.props.appendTo || document.body) : f : null;
  }
  // Getters
  get top() {
    return this.windowStage !== i.FULLSCREEN ? Math.max(this.props.top || this.state.top, 0) : 0;
  }
  get left() {
    return this.windowStage !== i.FULLSCREEN ? Math.max(this.props.left || this.state.left, 0) : 0;
  }
  get width() {
    let s = this.props.width || this.state.width;
    if (this.windowStage === i.FULLSCREEN) {
      if (this.props.appendTo)
        return s = this.props.appendTo.offsetWidth, s;
      const t = this.getWindow();
      s = t ? t.innerWidth : 0;
    }
    return s;
  }
  get height() {
    let s = this.props.height || this.state.height;
    if (this.windowStage === i.FULLSCREEN) {
      if (this.props.appendTo)
        return s = this.props.appendTo.offsetHeight, s;
      const t = this.getWindow();
      s = t ? t.innerHeight : 0;
    } else
      this.windowStage === i.MINIMIZED && (s = 0);
    return s;
  }
  get windowStage() {
    return this.props.stage || this.state.stage;
  }
  getActionBar(s) {
    return s.filter((t) => t && t.type === y);
  }
  getContent(s) {
    return s.filter((t) => t && t.type !== y);
  }
  generateTitleId() {
    return "window-title-" + this._id;
  }
};
c.displayName = "Window", c.propTypes = {
  width: o.number,
  height: o.number,
  left: o.number,
  top: o.number,
  initialWidth: o.number,
  initialHeight: o.number,
  initialLeft: o.number,
  initialTop: o.number,
  minWidth: o.number,
  minHeight: o.number,
  resizable: o.bool,
  draggable: o.bool,
  title: o.any,
  shouldUpdateOnDrag: o.bool,
  stage: o.oneOf(["DEFAULT", "MINIMIZED", "FULLSCREEN"]),
  className: o.string,
  id: o.string,
  style: o.object,
  overlayStyle: o.object
}, c.defaultProps = {
  minWidth: m,
  minHeight: S,
  resizable: !0,
  draggable: !0,
  modal: !1,
  doubleClickStageChange: !0
}, c.contextType = W;
let E = c;
const Y = O(), j = Z(P(Y, E));
j.displayName = "KendoReactWindow";
export {
  j as Window,
  Y as WindowPropsContext
};
