import { AggregateDescriptor } from './aggregate.operators';
import { AggregateResult } from '../transducers';
/**
 * The group descriptor used by the `groupBy` method.
 */
export interface GroupDescriptor {
    /**
     * The data item field by which the data will be grouped.
     */
    field: string;
    /**
     * The sort order of the group.
     */
    dir?: 'asc' | 'desc';
    /**
     * The aggregates which are calculated during grouping.
     */
    aggregates?: Array<AggregateDescriptor>;
    /**
     * A custom function that defines the sort order of the group.
     *
     * @param a - The first element for comparison.
     * @param b - The second element for comparison.
     *
     * @returns The return value should be a number whose sign indicates the relative order of the two elements:
     * negative if `a` is less than `b`, positive if `a` is greater than `b`, and zero if they are equal. NaN is treated as 0.
     */
    compare?: (a: any, b: any) => number;
}
/**
 * The result of the group operation.
 */
export interface GroupResult {
    /**
     * Contains either the subgroups, or the data items.
     */
    items: Object[];
    /**
     * The aggregated values for the group. An [AggregateResult]({% slug api_kendo-data-query_aggregateresult %}) instance.
     */
    aggregates: AggregateResult;
    /**
     * The field by which the data items are grouped.
     */
    field: string;
    /**
     * The group key.
     */
    value: any;
}
