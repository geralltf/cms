/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import { BaseEvent } from '@progress/kendo-react-common';
import { CustomComponent } from '@progress/kendo-react-common';
import { DraggableDragEvent } from '@progress/kendo-react-common';
import { FormComponent } from '@progress/kendo-react-common';
import { FormComponentProps } from '@progress/kendo-react-common';
import { FormComponentValidity } from '@progress/kendo-react-common';
import { HTMLAttributes } from 'react';
import { IconHandle } from '@progress/kendo-react-common';
import { IconProps } from '@progress/kendo-react-common';
import { JSX as JSX_2 } from 'react/jsx-runtime';
import { NumberFormatOptions } from '@progress/kendo-react-intl';
import { PopupAnimation } from '@progress/kendo-react-popup';
import PropTypes from 'prop-types';
import * as React_2 from 'react';
import { SVGIcon } from '@progress/kendo-react-common';
import { SvgIconHandle } from '@progress/kendo-react-common';
import { SvgIconProps } from '@progress/kendo-react-common';

/**
 * Represents the [KendoReact Checkbox component]({% slug overview_checkbox %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <Checkbox />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const Checkbox: React_2.ForwardRefExoticComponent<CheckboxProps & React_2.RefAttributes<CheckboxHandle | null>>;

/**
 * The arguments for the `onBlur` Checkbox event.
 */
export declare interface CheckboxBlurEvent extends BaseEvent<CheckboxHandle> {
}

/**
 * The arguments for the `onChange` Checkbox event.
 */
export declare interface CheckboxChangeEvent extends BaseEvent<CheckboxHandle> {
    /**
     * The new value of the Checkbox.
     */
    value: boolean;
}

/**
 * The arguments for the `onFocus` Checkbox event.
 */
export declare interface CheckboxFocusEvent extends BaseEvent<CheckboxHandle> {
}

/**
 * The Checkbox ref.
 */
export declare interface CheckboxHandle {
    element: HTMLInputElement | null;
    focus: any;
    value?: string | number | string[] | boolean | null;
    name?: string | null;
}

/**
 * Represents the props of the [KendoReact Checkbox component]({% slug overview_checkbox %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).
 */
export declare interface CheckboxProps extends ToggleBaseProps, FormComponentProps, Omit_3<React.InputHTMLAttributes<HTMLInputElement>, 'checked' | 'value' | 'size' | 'onChange' | 'onFocus' | 'onBlur'> {
    /**
     * Sets the checked state of the Checkbox.
     * Set to null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).
     */
    checked?: boolean | null;
    /**
     * If the type is different than boolean and the `checked` property is provided it's passed to the underlying `input` element.
     * If set to boolean and the `checked` property is omitted sets the checked state of the Checkbox.
     * Set null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).
     */
    value?: string | number | string[] | boolean | null;
    /**
     * Sets the `className` of the wrapping element of the Checkbox.
     */
    className?: string;
    /**
     * Sets the `className` of the label element of the Checkbox.
     */
    labelClassName?: string;
    /**
     * The React elements that are passed as children to the rendered component.
     */
    children?: any;
    /**
     * Sets the default value of checked attribute when used in uncontrolled mode ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * The default value of the Checkbox.
     */
    defaultValue?: any;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Sets the disabled state of the Checkbox
     * ([see example]({% slug disabled_checkbox %})).
     */
    disabled?: boolean;
    /**
     * Sets the `id` of the Checkbox.
     */
    id?: string;
    /**
     * Configures the `size` of the Checkbox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `rounded` style of the Checkbox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large';
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Sets the label of the Checkbox component ([see example]({% slug labels_checkbox %})).
     */
    label?: React.ReactNode;
    /**
     * Sets the label position of the Checkbox component ([see example]({% slug labels_checkbox %})).
     */
    labelPlacement?: 'before' | 'after';
    /**
     * Sets the optional text after the label of the Checkbox component.
     */
    labelOptional?: boolean;
    /**
     * Sets the `tabIndex` property of the Checkbox.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * The event handler that will be fired when the user edits the value.
     */
    onChange?: (event: CheckboxChangeEvent) => void;
    /**
     * The event handler that will be fired when Checkbox is focused.
     */
    onFocus?: (event: CheckboxFocusEvent) => void;
    /**
     * The event handler that will be fired when Checkbox is blurred.
     */
    onBlur?: (event: CheckboxBlurEvent) => void;
}

/**
 * Represents the PropsContext of the `Checkbox` component.
 * Used for global configuration of all `Checkbox` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const CheckboxPropsContext: React_2.Context<(p: CheckboxProps) => CheckboxProps>;

/** @hidden */
export declare type ColorGradient = ColorGradientHandle;

/**
 * Represents the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).
 *
 * Accepts properties of type [ColorGradientProps]({% slug api_inputs_colorgradientprops %}).
 * Obtaining the `ref` returns an object of type [ColorGradientHandle]({% slug api_inputs_colorgradienthandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorGradient />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const ColorGradient: React_2.ForwardRefExoticComponent<ColorGradientProps & React_2.RefAttributes<any>>;

/**
 * The arguments for the `onChange` ColorGradient event.
 */
export declare interface ColorGradientChangeEvent extends BaseEvent<ColorGradient> {
    /**
     * The current value of the ColorGradient.
     */
    value: string;
}

/**
 * Represent the `ref` of the ColorGradient component.
 */
export declare interface ColorGradientHandle extends Pick<ColorGradientWithoutContext, keyof ColorGradientWithoutContext> {
}

/**
 * Represents the props of the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).
 */
export declare interface ColorGradientProps {
    /**
     * The default value of the ColorGradient.
     */
    defaultValue?: string;
    /**
     * The value of the ColorGradient.
     */
    value?: string;
    /**
     * @hidden
     */
    role?: string;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: ColorGradientChangeEvent) => void;
    /**
     * Represents the focus event.
     */
    onFocus?: (event: any) => void;
    /**
     * Determines whether the alpha slider and the alpha input will be displayed. Defaults to `true`.
     */
    opacity?: boolean;
    /**
     * Enables the color contrast tool.
     * Sets the background color that will be compared to the selected value.
     * The tool will calculate the contrast ratio between two colors.
     * Currently, only the RGBA format is supported.
     */
    backgroundColor?: string;
    /**
     * Determines whether the ColorGradient is disabled
     * ([more information and example]({% slug disabled_colorgradient %})).
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *    render() {
     *       return (
     *           <ColorGradient disabled={true} />
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    disabled?: boolean;
    /**
     * The styles that are applied to the ColorGradient.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the ColorGradient.
     */
    tabIndex?: number;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Represents the label of the `hsv` drag handle component used inside the ColorGradient.
     */
    ariaLabelHSV?: string;
    /**
     * Represent the label of the component.
     */
    ariaLabel?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Represents the text rendered inside the `hsv` drag handle.
     */
    ariaValueText?: string;
    /**
     * Sets the default input format in the gradient input editor.
     *
     * @default 'rgb'
     */
    format?: 'rgba' | 'rgb' | 'hex';
    /**
     * Sets additional classes to the ColorGradient.
     */
    className?: string;
}

/**
 * Represents the PropsContext of the `ColorGradient` component.
 * Used for global configuration of all `ColorGradient` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const ColorGradientPropsContext: React_2.Context<(p: ColorGradientProps) => ColorGradientProps>;

/**
 * @hidden
 */
export declare interface ColorGradientState {
    hsva: HSVA;
    backgroundColor: string;
    rgba: RGBA;
    hex: string;
    isFirstRender: boolean;
    guid: string;
}

/** @hidden */
export declare class ColorGradientWithoutContext extends React_2.Component<ColorGradientProps, ColorGradientState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        defaultValue: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        opacity: PropTypes.Requireable<boolean>;
        backgroundColor: PropTypes.Requireable<string>;
        format: PropTypes.Requireable<any>;
        disabled: PropTypes.Requireable<boolean>;
        style: PropTypes.Requireable<any>;
        id: PropTypes.Requireable<string>;
        role: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        opacity: boolean;
        role: string;
        format: "hex" | "rgba" | "rgb";
    };
    /**
     * @hidden
     */
    wrapper: HTMLDivElement | null;
    private gradientWrapper;
    private alphaSlider;
    constructor(props: ColorGradientProps);
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ColorGradientProps, state: ColorGradientState): {
        hsva: any;
        backgroundColor: string;
        rgba: any;
        hex: any;
    } | null;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(_: ColorGradientProps, prevState: ColorGradientState): void;
    /**
     * @hidden
     */
    onHexChange: (hex: string, value: string, event: any) => void;
    /**
     * @hidden
     */
    onRgbaChange: (rgba: RGBA, event: NumericTextBoxChangeEvent) => void;
    /**
     * @hidden
     */
    onAlphaSliderChange: (event: SliderChangeEvent) => void;
    /**
     * @hidden
     */
    onHueSliderChange: (event: SliderChangeEvent) => void;
    /**
     * @hidden
     */
    onDrag: (e: DraggableDragEvent) => void;
    /**
     * @hidden
     */
    onRelease: () => void;
    /**
     * @hidden
     */
    onGradientWrapperClick: (event: React_2.MouseEvent<HTMLDivElement>) => void;
    /**
     * @hidden
     */
    renderRectangleDragHandle(): JSX_2.Element;
    /**
     * @hidden
     */
    changePosition: (event: any) => void;
    /**
     * @hidden
     */
    handleHsvaChange(hsva: HSVA, syntheticEvent: React_2.SyntheticEvent<any>, nativeEvent: any): void;
    /**
     * @hidden
     */
    dispatchChangeEvent(value: string, syntheticEvent: React_2.SyntheticEvent<any>, nativeEvent: any): void;
    /**
     * @hidden
     */
    onFocus: (nativeEvent: any) => void;
    /**
     * @hidden
     */
    static getStateFromValue(value: string, componentGuid?: string): {
        hsva: any;
        backgroundColor: string;
        rgba: any;
        hex: any;
    };
    /**
     * @hidden
     */
    setAlphaSliderBackground(backgroundColor: string): void;
    /**
     * @hidden
     */
    get isUncontrolled(): boolean;
    /**
     * @hidden
     */
    getGradientRectMetrics(): ClientRect;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX_2.Element;
}

/**
 * @hidden
 */
export declare class ColorInput extends React_2.Component<ColorInputProps, {
    inputMode: string;
}> {
    constructor(props: ColorInputProps);
    render(): JSX_2.Element;
    private onRgbaRChange;
    private onRgbaGChange;
    private onRgbaBChange;
    private onRgbaAChange;
    private dispatchRgbaChange;
    private onToggleModeChange;
}

/**
 * @hidden
 */
declare interface ColorInputProps {
    rgba: RGBA;
    onRgbaChange: (rgba: RGBA, event: NumericTextBoxChangeEvent) => void;
    hex: string;
    onHexChange: any;
    opacity: boolean;
    disabled?: boolean;
    defaultInputMode?: 'rgba' | 'rgb' | 'hex';
}

/** @hidden */
export declare type ColorPalette = ColorPaletteHandle;

/**
 * Represents the [KendoReact ColorPalette component]({% slug overview_colorpalette %}).
 *
 * Accepts properties of type [ColorPaletteProps]({% slug api_inputs_colorpaletteprops %}).
 * Obtaining the `ref` returns an object of type [ColorPaletteHandle]({% slug api_inputs_colorpalettehandle %}).
 *
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorPalette palette='basic' />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const ColorPalette: React_2.ForwardRefExoticComponent<ColorPaletteProps & React_2.RefAttributes<any>>;

/**
 * The arguments for the `onChange` ColorPalette event.
 */
export declare interface ColorPaletteChangeEvent extends BaseEvent<ColorPalette> {
    /**
     * The current value of the ColorPalette.
     */
    value: string;
    /**
     * The current value of the ColorPalette in RGBA format.
     */
    rgbaValue: string;
}

/**
 * Represent the `ref` of the ColorPalette component.
 */
export declare interface ColorPaletteHandle extends Pick<ColorPaletteWithoutContext, keyof ColorPaletteWithoutContext> {
}

/**
 * Represents the props of the [KendoReact ColorPalette component]({% slug overview_colorpalette %}).
 */
export declare interface ColorPaletteProps {
    /**
     * The color palette that will be displayed.
     *
     * The supported values are:
     * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).
     * * A string array.
     */
    palette?: string[] | string;
    /**
     * Specifies the number of columns that will be displayed.
     * Defaults to `10`.
     */
    columns?: number;
    /**
     * Specifies the size of a color cell in px.
     * Defaults to `24`.
     */
    tileSize?: number | TileSize;
    /**
     * The default value of the ColorPalette.
     */
    defaultValue?: string;
    /**
     * The value of the ColorPalette.
     */
    value?: string;
    /**
     * Determines whether the ColorPalette is disabled
     * ([more information and example]({% slug disabled_colorpalette %})).
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *    render() {
     *       return (
     *           <ColorPalette disabled={true} />
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    disabled?: boolean;
    /**
     * Sets the `tabIndex` property of the ColorPalette.
     */
    tabIndex?: number;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * @hidden
     */
    ariaDisabled?: boolean;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: ColorPaletteChangeEvent) => void;
    /**
     * Represent the focus event of the ColorPalette.
     */
    onFocus?: (event: FocusEvent) => void;
    /**
     * Sets additional classes to the ColorPalette.
     */
    className?: string;
}

/**
 * Represents the PropsContext of the `ColorPalette` component.
 * Used for global configuration of all `ColorPalette` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const ColorPalettePropsContext: React_2.Context<(p: ColorPaletteProps) => ColorPaletteProps>;

/**
 * @hidden
 */
export declare interface ColorPaletteState {
    selectedColor?: string;
    focusedColor?: string;
    isFirstRender: boolean;
}

/** @hidden */
export declare class ColorPaletteWithoutContext extends React_2.Component<ColorPaletteProps, ColorPaletteState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        palette: PropTypes.Requireable<NonNullable<string | string[] | null | undefined>>;
        columns: PropTypes.Requireable<number>;
        tileSize: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        palette: string;
        tileSize: number;
    };
    /**
     * @hidden
     */
    wrapper: HTMLDivElement | null;
    private paletteService;
    private get guid();
    constructor(props: ColorPaletteProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): "" | JSX_2.Element;
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ColorPaletteProps, state: ColorPaletteState): {
        selectedColor: undefined;
        isFirstRender?: undefined;
    } | {
        selectedColor: string;
        isFirstRender?: undefined;
    } | {
        isFirstRender: boolean;
        selectedColor?: undefined;
    } | null;
    private onKeyDown;
    private onColorClick;
    private onFocus;
    private onBlur;
    private handleCellNavigation;
    private handleEnter;
    private dispatchChangeEvent;
    private get focusedColorCooridanates();
    private get isUncontrolled();
    private getPaletteInfo;
    private renderRows;
    private renderColumns;
    private createCellId;
}

/**
 * Represents the [KendoReact ColorPicker component]({% slug overview_colorpicker %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorPicker />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const ColorPicker: React_2.ForwardRefExoticComponent<ColorPickerProps & React_2.RefAttributes<ColorPickerHandle | null>>;

/**
 * The arguments for the `onActiveColorClick` ColorPicker event.
 */
declare interface ColorPickerActiveColorClick {
    /**
     * The current value of the ColorPicker.
     */
    value: string;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}

/**
 * The arguments for the `onBlur` ColorPicker event.
 */
export declare interface ColorPickerBlurEvent {
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}

/**
 * The arguments for the `onChange` ColorPicker event.
 */
export declare interface ColorPickerChangeEvent {
    /**
     * The current value of the ColorPicker.
     */
    value: string;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}

/**
 * The arguments for the `onFocus` ColorPicker event.
 */
export declare interface ColorPickerFocusEvent {
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}

/**
 * The settings of the ColorGradient that is nested inside the popup of the ColorPicker
 * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-customizing-the-gradient-popup)).
 */
export declare interface ColorPickerGradientSettings {
    /**
     * Specifies if the component will render an alpha slider.
     * Defaults to `true`.
     */
    opacity?: boolean;
    /**
     * Enables the color contrast tool.
     * Sets the background color that will be compared to the selected value.
     * The tool will calculate the contrast ratio between two colors.
     * Currently, only the RGBA format is supported.
     */
    backgroundColor?: string;
}

/**
 * @hidden
 */
export declare interface ColorPickerHandle {
    element: HTMLSpanElement | null;
    value?: string;
}

/**
 * The settings of the ColorPalette that is nested inside the popup of the ColorPicker
 * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-customizing-the-palette-popup)).
 */
export declare interface ColorPickerPaletteSettings {
    /**
     * Specifies the set of colors.
     * Provides a set of predefined palette presets (for example, `office`, `basic`, and `apex`)
     * and enables you to implement a custom color palette.
     * Defaults to the `office` preset.
     *
     * The supported values are:
     * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).
     * * A string with comma-separated colors.
     * * A string array.
     */
    palette?: string | Array<string>;
    /**
     * Specifies the number of columns that will be displayed.
     * Defaults to `10`.
     */
    columns?: number;
    /**
     * Specifies the size of a color cell.
     *
     * The possible values are:
     * * (Default) `24`
     * * `{ width: number, height: number }`
     */
    tileSize?: number | TileSize;
}

/**
 * The settings of the popup container of the ColorPicker.
 */
export declare interface ColorPickerPopupSettings {
    /**
     * Controls the popup animation. By default, the open and close animations are enabled.
     */
    animate?: boolean | PopupAnimation;
    /**
     * Specifies a list of CSS classes that will be added to the Popup element.
     */
    className?: string | Array<string>;
}

/**
 * Represents the props of the [KendoReact ColorPicker component]({% slug overview_colorpicker %}).
 */
export declare interface ColorPickerProps {
    /**
     * The default value of the ColorPicker
     * ([see example]({% slug default_value_colorpicker %})).
     */
    defaultValue?: string;
    /**
     * Specifies the value of the ColorPicker. Currently, only the RGBA format is supported.
     */
    value?: string;
    /**
     * Overrides the validity state of the component.
     * If `valid` is set, the `required` property will be ignored.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    valid?: boolean;
    /**
     * Sets the disabled state of the ColorPicker
     * ([see example]({% slug disabled_colorpicker %})).
     */
    disabled?: boolean;
    /**
     * Sets the `tabIndex` property of the ColorPicker.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * Sets the `title` property of the ColorPicker.
     */
    title?: string;
    /**
     * Sets the view which the ColorPicker will render in the popup
     * ([see example]({% slug combinedview_colorpicker %})).
     */
    view?: ColorPickerView;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Defines the name of an [existing icon in the KendoReact theme]({% slug icons %}).
     * You have to provide only the name of the icon without the `k-icon` or the `k-i-` prefixes.
     * For example, `edit-tools` will be parsed to `k-icon k-i-edit-tools`
     * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-displaying-kendo-ui-icons)).
     */
    icon?: string;
    /**
     * Defines the SVG icon.
     */
    svgIcon?: SVGIcon;
    /**
     * The class name which displays an icon in the ColorPicker button
     * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-displaying-custom-icons)).
     */
    iconClassName?: string;
    /**
     * Configures the ColorGradient that is displayed in the ColorPicker popup
     * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-customizing-the-gradient-popup)).
     */
    gradientSettings?: ColorPickerGradientSettings;
    /**
     * Configures the ColorPalette that is displayed in the ColorPicker popup
     * ([see example]({% slug customizecolorpicker_colorpicker %}#toc-customizing-the-palette-popup)).
     */
    paletteSettings?: ColorPickerPaletteSettings;
    /**
     * Configures the popup of the ColorPicker.
     */
    popupSettings?: ColorPickerPopupSettings;
    /**
     * Sets the open and close state of the ColorPicker.
     */
    open?: boolean;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Represent the label of the component.
     */
    ariaLabel?: string;
    /**
     * The event handler that will be fired when the user edits the value.
     */
    onChange?: (event: ColorPickerChangeEvent) => void;
    /**
     * The event handler that will be fired when ColorPicker is focused.
     */
    onFocus?: (event: ColorPickerFocusEvent) => void;
    /**
     * The event handler that will be fired when ColorPicker is blurred.
     */
    onBlur?: (event: ColorPickerBlurEvent) => void;
    /**
     * The event handler that will be fired when the left side of the ColorPicker is clicked.
     */
    onActiveColorClick?: (event: ColorPickerActiveColorClick) => void;
    /**
     * Configures the `size` of the ColorPicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the ColorPicker.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the ColorPicker.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
    /**
     * Sets additional classes to the ColorPicker.
     */
    className?: string;
}

/**
 * Represents the PropsContext of the `ColorPicker` component.
 * Used for global configuration of all `ColorPicker` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const ColorPickerPropsContext: React_2.Context<(p: ColorPickerProps) => ColorPickerProps>;

/**
 * Specifies the view which the ColorPicker will render in the popup
 * ([see example]({% slug combinedview_colorpicker %})).
 *
 * The possible values are:
 * * (Default) `palette`
 * * `gradient`
 * * `combo`
 */
export declare type ColorPickerView = 'gradient' | 'palette' | 'combo';

declare type Direction = 'ltr' | 'rtl';

/**
 * Represents the [KendoReact FlatColorPicker component]({% slug overview_flatcolorpicker %}).
 * Accepts properties of type [FlatColorPickerProps]({% slug api_inputs_flatcolorpickerprops %}). Obtaining the [FlatColorPickerHandle]({% slug api_inputs_flatcolorpickerhandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <FlatColorPicker />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const FlatColorPicker: React_2.ForwardRefExoticComponent<FlatColorPickerProps & React_2.RefAttributes<FlatColorPickerHandle | null>>;

/**
 * The arguments for the `onChange` FlatColorPicker event.
 */
export declare interface FlatColorPickerChangeEvent {
    /**
     * The current value of the FlatColorPicker.
     */
    value: string | undefined;
    /**
     * A React Synthetic Event.
     */
    syntheticEvent: React_2.SyntheticEvent<any>;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}

/**
 * Represents the target (element and props) of the FlatColorPicker.
 */
export declare interface FlatColorPickerHandle {
    /**
     * The current element or `null` if there is none.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the FlatColorPicker.
     */
    props: FlatColorPickerProps;
    /**
     * The focus event callback.
     */
    focus: () => void;
    /**
     * The current value of the FlatColorPicker.
     */
    value: string | undefined;
}

/**
 * Represents the properties of [FlatColorPicker]({% slug api_inputs_flatcolorpicker %}) component.
 */
export declare interface FlatColorPickerProps {
    /**
     * Sets the `id` property of the top `div` element of the FlatColorPicker.
     */
    id?: string;
    /**
     * Sets additional CSS styles to the FlatColorPicker.
     */
    style?: React_2.CSSProperties;
    /**
     * Sets additional classes to the FlatColorPicker.
     */
    className?: string;
    /**
     * Sets the color value.
     */
    value?: string;
    /**
     * Sets the default color value.
     */
    defaultValue?: string;
    /**
     * The event handler that will be fired when the user changes the preview color.
     */
    onPreviewChange?: (event: FlatColorPickerChangeEvent) => void;
    /**
     * The event handler that will be fired when the user click the "Apply" button or on blur when the "Apply" button is not present.
     */
    onChange?: (event: FlatColorPickerChangeEvent) => void;
    /**
     * Specifies whether we should display the opacity slider to allow selection of transparency.
     *
     * @default true
     */
    opacity?: boolean;
    /**
     * Sets the default input format in the gradient input editor.
     *
     * @default 'rgb'
     */
    format?: 'hex' | 'rgba' | 'rgb';
    /**
     * Sets the `tabIndex` property of the FlatColorPicker.
     */
    tabIndex?: number;
    /**
     * Represents the label of the FlatColorPicker component.
     */
    ariaLabel?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Determines whether the FlatColorPicker is disabled.
     */
    disabled?: boolean;
    /**
     * Sets the FlatColorPicker view. The default is `ColorGradient`.
     */
    view?: 'ColorGradient' | 'ColorPalette' | undefined;
    /**
     * Sets custom header component.
     */
    header?: React_2.ComponentType;
    /**
     * Specifies whether clear button will be rendered in the header.
     */
    showClearButton?: boolean;
    /**
     * Specifies whether preview and revert color boxes will be rendered in the header.
     */
    showPreview?: boolean;
    /**
     * Specifies whether action buttons will be rendered in the footer.
     */
    showButtons?: boolean;
}

export { FormComponentValidity }

/**
 * @hidden
 */
declare interface HSVA {
    h?: number;
    s?: number;
    v?: number;
    a?: number;
}

/** @hidden */
export declare type Input = InputHandle;

/**
 * Represents the [KendoReact Input component]({% slug overview_textbox %}).
 *
 * Accepts properties of type [InputProps]({% slug api_inputs_inputprops %}).
 * Obtaining the `ref` returns an object of type [InputHandle]({% slug api_inputs_inputhandle %}).
 */
export declare const Input: React_2.ForwardRefExoticComponent<InputProps & React_2.RefAttributes<any>>;

/**
 * The arguments for the `change` event of the Input.
 */
export declare interface InputChangeEvent extends BaseEvent<Input> {
    /**
     * The current value of the Input.
     */
    value: string;
}

/**
 * Represents the KendoReact InputClearValue component.
 */
export declare const InputClearValue: React_2.ForwardRefExoticComponent<InputClearValueProps & React_2.RefAttributes<InputClearValueHandle>>;

/**
 * Represent the `ref` of the `InputClearValue` component.
 */
export declare type InputClearValueHandle = {
    element: HTMLSpanElement | null;
};

/**
 * Represents the `props` of the `InputClearValue` component.
 */
export declare type InputClearValueProps = React_2.HTMLAttributes<HTMLSpanElement>;

/**
 * Represent the `ref` of the Input component.
 */
export declare interface InputHandle extends Pick<InputWithoutContext, keyof InputWithoutContext> {
    /**
     * Gets the native input element of the Input component.
     */
    element: HTMLInputElement | null;
    /**
     * Gets the `name` property of the Input.
     */
    name: string | undefined;
    /**
     * Represents the validity state into which the Input is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value of the Input.
     */
    value: string | string[] | number | undefined;
}

/**
 * Represents the KendoReact InputPrefix component.
 */
export declare const InputPrefix: React_2.ForwardRefExoticComponent<React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputPrefix` component.
     */
    orientation?: "horizontal" | "vertical" | undefined;
} & React_2.RefAttributes<InputPrefixHandle>>;

/**
 * Represent the `ref` of the `InputPrefix` component.
 */
export declare type InputPrefixHandle = {
    element: HTMLSpanElement | null;
};

/**
 * Represents the `props` of the `InputPrefix` component.
 */
export declare type InputPrefixProps = React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputPrefix` component.
     */
    orientation?: 'horizontal' | 'vertical';
};

/**
 * Represents the props of the [KendoReact Input component]({% slug overview_textbox %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).
 */
export declare interface InputProps extends Omit_2<React_2.InputHTMLAttributes<HTMLInputElement>, 'onChange'>, FormComponentProps {
    /**
     * Renders a floating label for the Input component.
     */
    label?: string;
    /**
     * Sets a `className` for the floating label.
     */
    labelClassName?: string;
    /**
     * Represents the Input value.
     */
    value?: string | string[] | number;
    /**
     * Represents the Input default value.
     */
    defaultValue?: string | string[];
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Defines a string value that labels an interactive element.
     */
    ariaLabel?: string;
    /**
     * Triggered after value change.
     */
    onChange?: (event: InputChangeEvent) => void;
}

/**
 * Represents the PropsContext of the `Input` component.
 * Used for global configuration of all `Input` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const InputPropsContext: React_2.Context<(p: InputProps) => InputProps>;

/**
 * Represents the KendoReact InputSeparator component.
 */
export declare const InputSeparator: React_2.ForwardRefExoticComponent<React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputSeparator` component.
     */
    orientation?: "horizontal" | "vertical" | undefined;
} & React_2.RefAttributes<InputSeparatorHandle>>;

/**
 * Represent the `ref` of the `InputSeparator` component.
 */
export declare type InputSeparatorHandle = {
    element: HTMLSpanElement | null;
};

/**
 * Represents the `props` of the `InputSeparator` component.
 */
export declare type InputSeparatorProps = React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputSeparator` component.
     */
    orientation?: 'horizontal' | 'vertical';
};

/**
 * @hidden
 */
export declare const inputsMessages: {
    "numerictextbox.increment": string;
    "numerictextbox.decrement": string;
    "slider.increment": string;
    "slider.decrement": string;
    "slider.dragTitle": string;
    "colorGradient.r": string;
    "colorGradient.g": string;
    "colorGradient.b": string;
    "colorGradient.a": string;
    "colorGradient.hex": string;
    "colorGradient.contrastRatio": string;
    "colorGradient.colorGradientAALevel": string;
    "colorGradient.colorGradientAAALevel": string;
    "colorGradient.colorGradientPass": string;
    "colorGradient.colorGradientFail": string;
    "colorGradient.hueSliderLabel": string;
    "colorGradient.alphaSliderLabel": string;
    "colorGradient.toggleInputsButton": string;
    "flatColorPicker.cancelBtn": string;
    "flatColorPicker.applyBtn": string;
    "flatColorPicker.colorGradientBtn": string;
    "flatColorPicker.colorPaletteBtn": string;
    "flatColorPicker.clearBtn": string;
    "checkbox.validation": string;
    "checkbox.optionalText": string;
    "radioButton.validation": string;
    "switch.validation": string;
    "colorPicker.dropdownButtonAriaLabel": string;
    "rating.ariaLabel": string;
    "signature.clear": string;
    "signature.maximize": string;
    "signature.minimize": string;
};

/**
 * @hidden
 */
export declare interface InputState {
    value?: string | string[] | number;
}

/**
 * Represents the KendoReact InputSuffix component.
 */
export declare const InputSuffix: React_2.ForwardRefExoticComponent<React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputSuffix` component.
     */
    orientation?: "horizontal" | "vertical" | undefined;
} & React_2.RefAttributes<InputSuffixHandle>>;

/**
 * Represent the `ref` of the `InputSuffix` component.
 */
export declare type InputSuffixHandle = {
    element: HTMLSpanElement | null;
};

/**
 * Represents the `props` of the `InputSuffix` component.
 */
export declare type InputSuffixProps = React_2.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Sets the `orientation` property of the `InputSuffix` component.
     */
    orientation?: 'horizontal' | 'vertical';
};

/**
 * Represents the KendoReact InputValidationIcon component.
 */
export declare const InputValidationIcon: React_2.ForwardRefExoticComponent<IconProps & SvgIconProps & React_2.RefAttributes<InputValidationIconHandle>>;

/**
 * Represent the `ref` of the `InputValidationIcon` component.
 */
export declare type InputValidationIconHandle = IconHandle & SvgIconHandle;

/**
 * Represents the `props` of the `InputValidationIcon` component.
 */
export declare type InputValidationIconProps = IconProps & SvgIconProps;

/** @hidden */
export declare class InputWithoutContext extends React_2.Component<InputProps, InputState> implements FormComponent {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        label: PropTypes.Requireable<string>;
        labelClassName: PropTypes.Requireable<string>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        defaultValue: string;
        required: boolean;
        validityStyles: boolean;
    };
    private _input;
    private get _inputId();
    private valueDuringOnChange?;
    constructor(props: InputProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * Gets the native input element of the Input component.
     */
    get element(): HTMLInputElement | null;
    /**
     * Gets the value of the Input.
     */
    get value(): string | string[] | number | undefined;
    /**
     * Gets the `name` property of the Input.
     */
    get name(): string | undefined;
    /**
     * Represents the validity state into which the Input is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    render(): JSX_2.Element;
    protected isInvalid: (state: Object) => boolean;
    /**
     * @hidden
     */
    protected setValidity: () => void;
    private handleChange;
    /**
     * @hidden
     */
    private handleAutoFill;
}

/**
 * @hidden
 */
export declare const isCorrectValue: (min: number, max: number, step: number, value: number) => boolean;

/**
 * @hidden
 */
export declare const isHalf: (index: number, value: number, step: number) => boolean;

/**
 * @hidden
 */
export declare const isSelected: (index: number, value: number | null, step: number, selection: 'single' | 'continues') => boolean;

/** @hidden */
export declare type MaskedTextBox = MaskedTextBoxHandle;

/**
 * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).
 *
 * Accepts properties of type [MaskedTextBoxProps]({% slug api_inputs_maskedtextboxprops %}).
 * Obtaining the `ref` returns an object of type [MaskedTextBoxHandle]({% slug api_inputs_maskedtextboxhandle %}).
 */
export declare const MaskedTextBox: React_2.ForwardRefExoticComponent<MaskedTextBoxProps & React_2.RefAttributes<any>>;

/**
 * The arguments for the `change` event of the MaskedTextBox.
 */
export declare interface MaskedTextBoxChangeEvent extends MaskedTextBoxEvent {
    /**
     * Specifies the start of the selection which will be set to the MaskedTextBox when it is updated.
     */
    selectionStart: number;
    /**
     * Specifies the end of the selection which will be set to the MaskedTextBox when it is updated.
     */
    selectionEnd: number;
    /**
     * The current value of the component.
     */
    value: any;
}

/**
 * The arguments for a MaskedTextBox event.
 */
export declare interface MaskedTextBoxEvent {
    /**
     * A native DOM event.
     */
    nativeEvent: Event;
    /**
     * A React [`SyntheticEvent`](https://react.dev/learn/responding-to-events).
     */
    syntheticEvent: React.SyntheticEvent<HTMLElement>;
    /**
     * An event target.
     */
    target: MaskedTextBox;
}

/**
 * Represent the `ref` of the MaskedTextBox component.
 */
export declare interface MaskedTextBoxHandle extends Pick<MaskedTextBoxWithoutContext, keyof MaskedTextBoxWithoutContext> {
    /**
     * Gets the element of the MaskedTextBox.
     *
     * ```jsx
     * class App extends React.Component {
     * constructor(props) {
     *  super(props);
     * }
     * element = null;
     * render() {
     *  return (
     *      <div>
     *          <MaskedTextBox
     *              ref={(component) =>
     *                  this.element = component ? component.element : null}
     *          />
     *          <button onClick={() => console.log(this.element)}>console.log the element</button>
     *      </div>
     *  );
     * }
     * }
     *
     * ReactDOM.render(
     * <App />,
     * document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    element: HTMLInputElement | null;
    /**
     * Gets the `name` property of the MaskedTextBox.
     */
    name: string | undefined;
    /**
     * Gets the raw value without the mask of the MaskedTextBox.
     */
    rawValue: string;
    /**
     * Represents the validity state into which the MaskedTextBox is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value with the mask of the MaskedTextBox.
     */
    value: string;
}

/**
 * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).
 */
export declare interface MaskedTextBoxProps extends FormComponentProps {
    /**
     * Sets a class of the MaskedTextBox DOM element.
     */
    className?: string;
    /**
     * Sets additional CSS styles to the MaskedTextBox DOM element.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the value of the MaskedTextBox.
     */
    value?: string;
    /**
     * Specifies the initial value. Leaves the subsequent updates uncontrolled.
     */
    defaultValue?: string;
    /**
     * Specifies the input placeholder.
     */
    placeholder?: string;
    /**
     * Sets the title of the `input` element of the MaskedTextBox.
     */
    title?: string;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Sets the `tabIndex` property of the MaskedTextBox.
     */
    tabIndex?: number;
    /**
     * Specifies the `accessKey` of the MaskedTextBox.
     */
    accessKey?: string;
    /**
     * Specifies the width of the MaskedTextBox.
     */
    width?: number | string;
    /**
     * Determines whether the MaskedTextBox is disabled.
     */
    disabled?: boolean;
    /**
     * Renders a floating label for the MaskedTextBox.
     */
    label?: string;
    /**
     * Sets the `id` of the `input` DOM element.
     */
    id?: string;
    /**
     * Sets a custom prefix to the MaskedTextBox component.
     */
    prefix?: CustomComponent<any>;
    /**
     * Sets a custom suffix to the MaskedTextBox component.
     */
    suffix?: CustomComponent<any>;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Determines whether the MaskedTextBox is in its read-only state.
     */
    readonly?: boolean;
    /**
     * Represents a prompt character for the masked value. Defaults to `_`.
     */
    prompt?: string;
    /**
     * Indicates a character which represents an empty position in the raw value. Defaults to ` `.
     */
    promptPlaceholder?: string;
    /**
     * Indicates whether to include literals in the raw value. Defaults to `false`.
     */
    includeLiterals?: boolean;
    /**
     * Determines whether the built-in mask validator is enforced when a form is validated. Defaults to `true`.
     */
    maskValidation?: boolean;
    /**
     * Represents the current mask. If no mask is set, the component behaves as a standard `type="text"` input.
     */
    mask?: string;
    /**
     * Represents the RegExp-based mask validation array.
     */
    rules?: {
        [key: string]: RegExp;
    };
    /**
     * Represents the beginning and ending of the selected portion of the input content that will be applied the next time when the MaskedTextBox is rendered.
     */
    selection?: {
        start: number;
        end: number;
    };
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: MaskedTextBoxChangeEvent) => void;
    /**
     * Fires each time the user focuses the MaskedTextBox.
     */
    onFocus?: (event: MaskedTextBoxEvent) => void;
    /**
     * Fires each time the MaskedTextBox gets blurred.
     */
    onBlur?: (event: MaskedTextBoxEvent) => void;
    /**
     * Configures the `size` of the MaskedTextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the MaskedTextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the MaskedTextBox.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
}

/**
 * Represents the PropsContext of the `MaskedTextBox` component.
 * Used for global configuration of all `MaskedTextBox` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const MaskedTextBoxPropsContext: React_2.Context<(p: MaskedTextBoxProps) => MaskedTextBoxProps>;

/**
 * @hidden
 */
declare interface MaskedTextBoxState {
    focused?: boolean;
    value?: string;
}

/** @hidden */
export declare class MaskedTextBoxWithoutContext extends React_2.Component<MaskedTextBoxProps, MaskedTextBoxState> implements FormComponent {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        prefix: PropTypes.Requireable<any>;
        suffix: PropTypes.Requireable<any>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        width: PropTypes.Requireable<NonNullable<string | number | null | undefined>>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        readonly: PropTypes.Requireable<boolean>;
        prompt: PropTypes.Requireable<string>;
        promptPlaceholder: PropTypes.Requireable<string>;
        includeLiterals: PropTypes.Requireable<boolean>;
        maskValidation: PropTypes.Requireable<boolean>;
        mask: PropTypes.Requireable<string>;
        rules: (props: MaskedTextBoxProps, propName: string, componentName: string) => Error | null;
        selection: PropTypes.Requireable<PropTypes.InferProps<{
            start: PropTypes.Validator<number>;
            end: PropTypes.Validator<number>;
        }>>;
        name: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        valid: PropTypes.Requireable<boolean>;
        validityStyles: PropTypes.Requireable<boolean>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        size: PropTypes.Requireable<"small" | "large" | "medium" | null | undefined>;
        rounded: PropTypes.Requireable<"small" | "large" | "medium" | "full" | null | undefined>;
        fillMode: PropTypes.Requireable<"flat" | "solid" | "outline" | null | undefined>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        prompt: string;
        promptPlaceholder: string;
        includeLiterals: boolean;
        maskValidation: boolean;
        rules: {
            [key: string]: RegExp;
        };
        required: boolean;
        validityStyles: boolean;
        prefix: (_: any) => null;
        suffix: (_: any) => null;
        size: "small" | "large" | "medium" | null | undefined;
        rounded: "small" | "large" | "medium" | "full" | null | undefined;
        fillMode: "flat" | "solid" | "outline" | null | undefined;
    };
    /**
     * @hidden
     */
    state: MaskedTextBoxState;
    private _inputId;
    private _service;
    private _isPasted;
    private _selection;
    private _input;
    private _valueDuringOnChange?;
    constructor(props: MaskedTextBoxProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * Gets the element of the MaskedTextBox.
     *
     * @return - An `HTMLInputElement`.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *     constructor(props) {
     *         super(props);
     *     }
     *     element = null;
     *     render() {
     *         return (
     *             <div>
     *                 <MaskedTextBox
     *                     ref={(component) =>
     *                         this.element = component ? component.element : null}
     *                 />
     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
     *             </div>
     *         );
     *     }
     * }
     *
     * ReactDOM.render(
     *     <App />,
     *     document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    get element(): HTMLInputElement | null;
    /**
     * Gets the value with the mask of the MaskedTextBox.
     */
    get value(): string;
    /**
     * Gets the raw value without the mask of the MaskedTextBox.
     */
    get rawValue(): string;
    /**
     * Represents the validity state into which the MaskedTextBox is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * Gets the `name` property of the MaskedTextBox.
     */
    get name(): string | undefined;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: MaskedTextBoxProps, prevState: MaskedTextBoxState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX_2.Element;
    private pasteHandler;
    private onChangeHandler;
    private focusHandler;
    private blurHandler;
    private triggerOnChange;
    private updateService;
    private get rules();
    private setValidity;
}

/**
 * @hidden
 */
export declare const maskingChanged: (prev: MaskedTextBoxProps, next: MaskedTextBoxProps) => boolean;

/**
 * @hidden
 */
export declare const numericDecreaseValue = "numerictextbox.decrement";

/**
 * @hidden
 */
export declare const numericIncreaseValue = "numerictextbox.increment";

/**
 * Represents the [KendoReact NumericTextBox component]({% slug overview_numerictextbox %}).
 */
export declare const NumericTextBox: React_2.ForwardRefExoticComponent<NumericTextBoxProps & React_2.RefAttributes<NumericTextBoxHandle | null>>;

/**
 * The arguments for the `onBlur` NumericTextBox event.
 */
export declare interface NumericTextBoxBlurEvent extends BaseEvent<NumericTextBoxHandle> {
}

/**
 * The arguments for the `change` event of the NumericTextBox.
 */
export declare interface NumericTextBoxChangeEvent extends BaseEvent<NumericTextBoxHandle> {
    /**
     * The current value of the NumericTextBox.
     */
    value: number | null;
}

/**
 * The arguments for the `onFocus` NumericTextBox event.
 */
export declare interface NumericTextBoxFocusEvent extends BaseEvent<NumericTextBoxHandle> {
}

/**
 * The NumericTextBox ref.
 */
export declare interface NumericTextBoxHandle {
    /**
     * The NumericTextBox element.
     */
    element: HTMLInputElement | null;
    /**
     * Focus the NumericTextBox.
     */
    focus: () => void;
    /**
     * Gets the `name` property of the NumericTextBox.
     */
    name: string | undefined;
    /**
     * Gets the value of the NumericTextBox.
     */
    value: number | null;
    /**
     * Represents the validity state into which the NumericTextBox is set.
     */
    validity: FormComponentValidity;
    /**
     * @hidden
     */
    props: NumericTextBoxProps;
    /**
     * @hidden
     */
    validityStyles: boolean;
    /**
     * @hidden
     */
    required: boolean;
}

declare type NumericTextBoxInputType = 'tel' | 'text' | 'number';

/**
 * Represents the props of the [KendoReact NumericTextBox component]({% slug overview_numerictextbox %}).
 */
export declare interface NumericTextBoxProps extends FormComponentProps, Omit<(React.HTMLAttributes<HTMLElement>), 'defaultValue' | 'prefix' | 'onChange' | 'onBlur' | 'onFocus'> {
    /**
     * Sets a class of the NumericTextBox DOM element.
     */
    className?: string;
    /**
     * Specifies the value of the NumericTextBox.
     */
    value?: number | null;
    /**
     * Specifies the initial value. Leaves the subsequent updates uncontrolled.
     */
    defaultValue?: number | null;
    /**
     * Specifies the value that is used to increment or decrement the value of the NumericTextBox ([see example]({% slug predefinedsteps_numerictextbox %})).
     */
    step?: number;
    /**
     * Specifies the number format which is used for formatting the value ([see example]({% slug formats_numerictextbox %})). If set to `an empty string` or `undefined`, the default format will be used. Format cannot contain decimal separators or numbers. Power signs are supported.
     */
    format?: string | NumberFormatOptions;
    /**
     * Specifies the width of the NumericTextBox.
     */
    width?: number | string;
    /**
     * Sets the `tabIndex` property of the NumericTextBox.
     */
    tabIndex?: number;
    /**
     * Specifies the `accessKey` of the NumericTextBox.
     */
    accessKey?: string;
    /**
     * Sets the title of the `input` element of the NumericTextBox.
     */
    title?: string;
    /**
     * Specifies the input placeholder.
     */
    placeholder?: string;
    /**
     * Specifies the smallest value that can be entered.
     */
    min?: number;
    /**
     * Specifies the greatest value that can be entered.
     */
    max?: number;
    /**
     * Specifies whether the **Up** and **Down** spin buttons will be rendered ([see example]({% slug spinbuttons_numerictextbox %})).
     */
    spinners?: boolean;
    /**
     * Determines whether the NumericTextBox is disabled.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies the name of the `input` DOM element.
     */
    name?: string;
    /**
     * Renders a floating label for the NumericTextBox.
     */
    label?: string;
    /**
     * Sets the `id` of the `input` DOM element.
     */
    id?: string;
    /**
     * Sets a custom prefix to the NumericTextBox component.
     */
    prefix?: CustomComponent<any>;
    /**
     * Sets a custom suffix to the NumericTextBox component.
     */
    suffix?: CustomComponent<any>;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
    /**
     * Sets the `type` of the `input` DOM element.
     *
     * The available options are:
     * - (Default) `tel`
     * - `text`
     */
    inputType?: NumericTextBoxInputType;
    /**
     * If enabled, the NumericTextBox will handle the `enter` key to range the current invalid value between `min` and `max` props.
     * The available options are:
     * - (Default) `true`
     * - `false`
     * Can be disabled when form submit is required on pressing the `enter` key.
     */
    rangeOnEnter?: boolean;
    /**
     * Determines whether the NumericTextBox is in its read-only state.
     */
    readOnly?: boolean;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: NumericTextBoxChangeEvent) => void;
    /**
     * The event handler that will be fired when NumericTextBox is focused.
     */
    onFocus?: (event: NumericTextBoxFocusEvent) => void;
    /**
     * The event handler that will be fired when NumericTextBox is blurred.
     */
    onBlur?: (event: NumericTextBoxBlurEvent) => void;
    /** @hidden */
    children?: React.ReactNode;
    /**
     * Configures the `size` of the NumericTextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the NumericTextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the NumericTextBox.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
    /**
     * Represents the `style` HTML attribute.
     */
    style?: React.CSSProperties;
    /**
     * Represents the input element `style` HTML attribute.
     */
    inputStyle?: React.CSSProperties;
}

/**
 * Represents the PropsContext of the `NumericTextBox` component.
 * Used for global configuration of all `NumericTextBox` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const NumericTextBoxPropsContext: React_2.Context<(p: NumericTextBoxProps) => NumericTextBoxProps>;

/**
 * @hidden
 */
declare interface NumericTextBoxState {
    eventValue: number | null | undefined;
    prevLooseValue: string | undefined;
    currentLooseValue: string | undefined;
    selectionStart: number | undefined;
    selectionEnd: number | undefined;
    decimalSelect: boolean;
    valueIsCorrected: boolean;
    valueIsOutOfRange: boolean;
    focused: boolean;
    isPaste: boolean;
}

/**
 * @hidden
 */
declare type Omit_2<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * @hidden
 */
declare type Omit_3<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * @hidden
 */
declare type Omit_4<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * @hidden
 */
declare type Omit_5<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * @hidden
 */
export declare const PALETTEPRESETS: {
    basic: {
        colors: string[];
        columns: number;
    };
    office: {
        colors: string[];
        columns: number;
    };
    apex: {
        colors: string[];
        columns: number;
    };
    austin: {
        colors: string[];
        columns: number;
    };
    clarity: {
        colors: string[];
        columns: number;
    };
    slipstream: {
        colors: string[];
        columns: number;
    };
    metro: {
        colors: string[];
        columns: number;
    };
    flow: {
        colors: string[];
        columns: number;
    };
    hardcover: {
        colors: string[];
        columns: number;
    };
    trek: {
        colors: string[];
        columns: number;
    };
    verve: {
        colors: string[];
        columns: number;
    };
    monochrome: {
        colors: string[];
        columns: number;
    };
};

/**
 * Represents the [KendoReact RadioButton component]({% slug overview_radiobutton %}).
 *
 * Accepts properties of type [RadioButtonProps]({% slug api_inputs_radiobuttonprops %}).
 * Obtaining the `ref` returns an object of type [RadioButtonHandle]({% slug api_inputs_radiobuttonhandle %}).
 */
export declare const RadioButton: React_2.ForwardRefExoticComponent<RadioButtonProps & React_2.RefAttributes<RadioButtonHandle | null>>;

/**
 * The arguments for the `onBlur` RadioButton event.
 */
export declare interface RadioButtonBlurEvent extends BaseEvent<RadioButtonHandle> {
}

/**
 * The arguments for the `onChange` RadioButton event.
 */
export declare interface RadioButtonChangeEvent extends BaseEvent<RadioButtonHandle> {
    /**
     * The value of the selected RadioButton.
     */
    value: any;
}

/**
 * The arguments for the `onFocus` RadioButton event.
 */
export declare interface RadioButtonFocusEvent extends BaseEvent<RadioButtonHandle> {
}

/**
 * The RadioButton ref.
 */
export declare interface RadioButtonHandle {
    element: HTMLInputElement | null;
    focus: any;
}

/**
 * Represents the props of the [KendoReact RadioButton component]({% slug overview_radiobutton %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).
 */
export declare interface RadioButtonProps extends Omit_4<React.InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange' | 'onFocus' | 'onBlur'> {
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    children?: any;
    /**
     * Specifies if the Radio button is checked.
     */
    checked?: boolean;
    /**
     * Specifies a list of CSS classes that will be added to the Radio button.
     */
    className?: string;
    /**
     * Specifies if the Radio button is disabled.
     */
    disabled?: boolean;
    /**
     * Specifies the current index of the Radio button.
     */
    index?: number;
    /**
     * Sets the `id` of the Radio button.
     */
    id?: string;
    /**
     * Configures the `size` of the RadioButton.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Sets the label of the Radio button ([see example]({% slug labels_radiobutton %})).
     */
    label?: string;
    /**
     * Sets the label position of the Radio button ([see example]({% slug labels_radiobutton %})).
     * Accepts two options: `before` or `after`. Defaults to `after`.
     */
    labelPlacement?: string;
    /**
     * Sets the `name` property of the Radio button.
     */
    name?: string;
    /**
     * Sets additional CSS styles to the Radio button.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the Radio button.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * Overrides the validity state of the component.
     * If `valid` is set, the `required` property will be ignored.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    valid?: boolean;
    /**
     * Sets the value to be submitted.
     */
    value?: any;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: RadioButtonChangeEvent) => void;
    /**
     * The event handler that will be fired when RadioButton is focused.
     */
    onFocus?: (event: RadioButtonFocusEvent) => void;
    /**
     * The event handler that will be fired when RadioButton is blurred.
     */
    onBlur?: (event: RadioButtonBlurEvent) => void;
}

/**
 * Represents the PropsContext of the `RadioButton` component.
 * Used for global configuration of all `RadioButton` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const RadioButtonPropsContext: React_2.Context<(p: RadioButtonProps) => RadioButtonProps>;

/**
 * Represents the [KendoReact RadioGroup component]({% slug overview_radiogroup %}).
 *
 * Accepts properties of type [RadioGroupProps]({% slug api_inputs_radiogroupprops %}).
 * Obtaining the `ref` returns an object of type [RadioGroupHandle]({% slug api_inputs_radiogrouphandle %}).
 */
export declare const RadioGroup: React_2.ForwardRefExoticComponent<RadioGroupProps & React_2.RefAttributes<RadioGroupHandle | null>>;

/**
 * The arguments for the `onChange` RadioGroup event.
 */
export declare interface RadioGroupChangeEvent extends BaseEvent<RadioGroupHandle> {
    /**
     * The value of the selected RadioButton.
     */
    value: any;
}

/**
 * The arguments for the `onFocus` RadioGroup event.
 */
export declare interface RadioGroupFocusEvent extends BaseEvent<RadioGroupHandle> {
}

/**
 * The RadioGroup ref.
 */
export declare interface RadioGroupHandle {
    element: HTMLUListElement | null;
    focus: any;
}

/**
 * Represents the props of the [KendoReact RadioGroup component]({% slug overview_radiobutton %}).
 */
export declare interface RadioGroupProps {
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Specifies a list of CSS classes that will be added to the RadioGroup element.
     */
    className?: string;
    /**
     * Specifies the value of the `id` attribute that will be added to the RadioGroup element.
     */
    id?: string;
    /**
     * The collection of radio buttons that will be rendered in the RadioGroup ([see example]({% slug overview_radiobutton %})).
     */
    data?: Array<RadioButtonProps>;
    /**
     * Sets the default checked state of a radio button when used in uncontrolled mode ([see example]({% slug overview_radiobutton %})).
     * The `checked` property is passed to the underlying `input` element.
     */
    defaultValue?: any;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Disable all radio buttons ([see example]({% slug disabled_radiobutton %})).
     */
    disabled?: boolean;
    /**
     * Overrides the default component responsible for visualizing a single item.
     *
     * The default element is `li` with a [RadioButton]({% slug api_inputs_radiobutton %}) as `children`.
     */
    item?: React.ComponentType<HTMLAttributes<HTMLLIElement>>;
    /**
     * Sets the label position of the radio buttons.
     * Accepts two options: `before` or `after`. Defaults to `after`.
     */
    labelPlacement?: string;
    /**
     * Specifies the radio group layout.
     */
    layout?: 'horizontal' | 'vertical';
    /**
     * Specifies the `name` property of the `input` DOM elements.
     */
    name?: string;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: RadioGroupChangeEvent) => void;
    /**
     * The event handler that will be fired when Radio button is focused.
     */
    onFocus?: (event: RadioGroupFocusEvent) => void;
    /**
     * Sets additional CSS styles to the radio group.
     */
    style?: React.CSSProperties;
    /**
     * Sets the default checked state of a radio button when used in controlled mode ([see example]({% slug controlled_radiogroup %})).
     * The `checked` property is passed to the underlying `input` element.
     */
    value?: string | number | null;
    /**
     * Overrides the validity state of the component.
     * If `valid` is set, the `required` property will be ignored.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    valid?: boolean;
}

/**
 * Represents the PropsContext of the `RadioGroup` component.
 * Used for global configuration of all `RadioGroup` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const RadioGroupPropsContext: React_2.Context<(p: RadioGroupProps) => RadioGroupProps>;

/**
 * The range object representing the value of the RangeSlider.
 */
declare type Range_2 = {
    /**
     * The start of the range.
     */
    start: number;
    /**
     * The end of the range.
     */
    end: number;
};
export { Range_2 as Range }

/**
 * @hidden
 */
export declare enum RANGE_ACTION {
    start = "start",
    end = "end",
    min = "min",
    max = "max",
    increase = "increase",
    decrease = "decrease"
}

/**
 * @hidden
 */
declare interface RangeAction extends RangeActionDispatch {
    step: number;
    min: number;
    max: number;
}

/**
 * @hidden
 */
declare type RangeActionDispatch = {
    type: RANGE_ACTION;
    payload?: number;
    key?: string;
    event?: React_2.SyntheticEvent<any> | DraggableDragEvent;
    state?: Range_2;
};

/**
 * @hidden
 */
export declare const rangeReducer: (state: any, action: RangeAction) => any;

/**
 * Represents the [KendoReact RangeSlider component]({% slug overview_rangeslider %}).
 *
 * Accepts properties of type [RangeSliderProps]({% slug api_inputs_rangesliderprops %}).
 * Obtaining the `ref` returns an object of type [RangeSliderHandle]({% slug api_inputs_rangesliderhandle %}).
 */
export declare const RangeSlider: React_2.ForwardRefExoticComponent<RangeSliderProps & React_2.RefAttributes<RangeSliderHandle | null>>;

/**
 * Represent the return type of RangeSliderChangeEvent.
 */
export declare interface RangeSliderChangeEvent {
    /**
     * The value from type Range - `start` and `end`.
     */
    value: Range_2;
    /**
     * The target of the RangeSliderChangeEvent from RangeSliderHandle.
     */
    target: RangeSliderHandle;
    /**
     * The event of the RangeSliderChangeEvent.
     */
    syntheticEvent: React_2.SyntheticEvent<any> | DraggableDragEvent;
}

/**
 * Represents the target(element and props) of the RangeSliderChangeEvent.
 */
export declare interface RangeSliderHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the RangeSlider.
     */
    props: RangeSliderProps;
    /**
     * The focus event callback.
     */
    focus: () => void;
}

/**
 * Represents the properties of [RangeSlider](% slug api_inputs_rangeslider %) component.
 */
export declare interface RangeSliderProps extends FormComponentProps {
    /**
     * Sets the `id` property of the top div element of the RangeSlider.
     */
    id?: string;
    /**
     * Sets additional CSS styles to the RangeSlider.
     */
    style?: React_2.CSSProperties;
    /**
     * Sets additional classes to the RangeSlider.
     */
    className?: string;
    /**
     * The flexible values of type Range - `start and `end`.
     */
    value?: Range_2;
    /**
     * The default set values of type Range - `start` and `end`.
     */
    defaultValue?: Range_2;
    /**
     * Triggered after value change - gets outside access to the element, new values and the event type.
     */
    onChange?: (event: RangeSliderChangeEvent) => void;
    /**
     * Determines the children nodes.
     */
    children?: React_2.ReactNode;
    /**
     * The step by which the value is increment/decrement.
     */
    step?: number;
    /**
     * The minimum possible value of the RangeSlider.
     */
    min: number;
    /**
     * The maximum possible value of the RangeSlider.
     */
    max: number;
    /**
     * The RangeSlider orientation if true - vertical, else - horizontal.
     */
    vertical?: boolean;
    /**
     * Determines the disabled mode of the RangeSlider, if true - disabled.
     */
    disabled?: boolean;
    /**
     * The RangeSlider direction `ltr` or `rtl`.
     */
    dir?: Direction;
    /**
     * Sets the `tabIndex` attribute to the `start` drag handle.
     */
    startTabIndex?: number;
    /**
     * Sets the `tabIndex` attribute to the `end` drag handle.
     */
    endTabIndex?: number;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
}

/**
 * Represents the PropsContext of the `RangeSlider` component.
 * Used for global configuration of all `RangeSlider` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const RangeSliderPropsContext: React_2.Context<(p: RangeSliderProps) => RangeSliderProps>;

/**
 * Represents the [KendoReact Rating component]({% slug overview_rating %}).
 *
 * Accepts properties of type [RatingProps]({% slug api_inputs_ratingprops %}).
 * Obtaining the `ref` returns an object of type [RatingHandle]({% slug api_inputs_ratinghandle %}).
 */
export declare const Rating: React_2.ForwardRefExoticComponent<RatingProps & React_2.RefAttributes<RatingHandle | null>>;

/**
 * @hidden
 */
export declare enum RATING_ACTION {
    select = "select",
    deselect = "deselect",
    increase = "increase",
    decrease = "decrease",
    min = "min",
    max = "max",
    reset = "reset"
}

/**
 * @hidden
 */
declare type RatingAction = {
    min: number;
    max: number;
    step?: number;
};

/**
 * @hidden
 */
declare type RatingActionDispatch = {
    type: RATING_ACTION;
    payload?: number;
    event?: React.SyntheticEvent<any>;
};

/**
 * Represents the return type of RatingChangeEvent.
 */
export declare interface RatingChangeEvent {
    /**
     * The current Rating value.
     */
    value: number;
    /**
     * The target of the RatingChangeEvent from RatingHandle.
     */
    target: RatingHandle;
    /**
     * The event of the RatingChangeEvent.
     */
    syntheticEvent: React_2.SyntheticEvent<any>;
}

/**
 * Represents the return type od the RatingFocusEvent.
 */
export declare interface RatingFocusEvent {
    /**
     * The target of the RatingFocusEvent from RatingHandle.
     */
    target: RatingHandle;
    /**
     * The event of the RatingFocusEvent.
     */
    syntheticEvent: React.FocusEvent<any>;
}

/**
 * Represents the target(element and props) of the RatingChangeEvent.
 */
export declare interface RatingHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props value of the Rating.
     */
    props: RatingProps;
}

/**
 * Represents the RatingItem component.
 */
export declare const RatingItem: React_2.ForwardRefExoticComponent<RatingItemProps & React_2.RefAttributes<RatingItemHandle | null>>;

/**
 * Represents the return type of the RatingItemFocusEvent.
 */
export declare interface RatingItemFocusEvent {
    /**
     * The target of the RatingItemFocusEvent from RatingItemHandle.
     */
    target: RatingItemHandle;
    /**
     * The event of the RatingItemFocusEvent.
     */
    syntheticEvent: React.FocusEvent<any>;
}

/**
 * Represents the target(value, element and props) of The RatingItem.
 */
export declare interface RatingItemHandle {
    /**
     * The current RatingItem value.
     */
    value: number;
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props value of the RatingItem.
     */
    props: RatingItemProps;
}

/**
 * Represents the return type of the RatingItemKeyboardEvent.
 */
export declare interface RatingItemKeyboardEvent {
    /**
     * The target of the RatingItemKeyboardEvent from RatingItemHandle.
     */
    target: RatingItemHandle;
    /**
     * The event of the RatingItemKeyboardEvent.
     */
    syntheticEvent: React.KeyboardEvent<any>;
}

/**
 * Represents the return type of the RatingItemMouseEvent.
 */
export declare interface RatingItemMouseEvent {
    /**
     * The target of the RatingItemMouseEvent from RatingItemHandle.
     */
    target: RatingItemHandle;
    /**
     * The event of the RatingItemMouseEvent.
     */
    syntheticEvent: React.MouseEvent<any>;
    /**
     * @hidden
     */
    value?: number | null;
}

/**
 * Represents the properties of [RatingItem](% slug api_inputs_ratingitem %) component.
 */
export declare interface RatingItemProps {
    /**
     * Sets the `id` property of the top div element of the RatingItem.
     */
    id?: string;
    /**
     * Sets additional classes to the RatingItem.
     */
    className?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Determines if icon is partly selected.
     */
    half?: boolean;
    /**
     * Sets additional CSS styles to the RatingItem.
     */
    style?: React_2.CSSProperties;
    /**
     * Determines the children nodes.
     */
    children?: React_2.ReactNode;
    /**
     * Determines the RatingItem direction `ltr` - by default, or `rtl`.
     */
    dir?: string;
    /**
     * Sets the current value of the RatingItem, used in controlled mode.
     */
    value: number;
    /**
     * Sets the title of current RatingItem component. [See example]({% slug controlled_rating %})
     */
    title?: string;
    /**
     * Sets the icon of current RatingItem component. [See example]({% slug label_rating %})
     */
    icon?: any;
    /**
     * Determines if current RatingItem is selected. [See example]({% slug item_customization_ratingitem %})
     */
    selected?: boolean;
    /**
     * Determines if current RatingItem is hovered.
     */
    hovered?: boolean;
    /**
     * Triggered after `onClick` event. Gets outside access to the target element, the new value and the event type.
     */
    onClick?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onKeyDown` event. Gets outside access to the target element, the new value and the event type.
     */
    onKeyDown?: (event: RatingItemKeyboardEvent) => void;
    /**
     * Triggered after `onFocus` event. Gets outside access to the target element and the event type.
     */
    onFocus?: (event: RatingItemFocusEvent) => void;
    /**
     * Triggered after `onBlur` event. Gets outside access to the target element and the event type.
     */
    onBlur?: (event: RatingItemFocusEvent) => void;
    /**
     * Triggered after `onMouseEnter` event. Gets outside access to the target element and the event type.
     */
    onMouseEnter?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onMouseLeave` event. Gets outside access to the target element and the event type.
     */
    onMouseLeave?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onMouseMove` event. Gets outside access to the target element and the event type.
     */
    onMouseMove?: (event: RatingItemMouseEvent) => void;
}

/**
 * Represents the return type of the RatingKeyboardEvent.
 */
export declare interface RatingKeyboardEvent {
    /**
     * The target of the RatingKeyboardEvent from RatingHandle.
     */
    target: RatingHandle;
    /**
     * The event of the RatingKeyboardEvent.
     */
    syntheticEvent: React.KeyboardEvent<any>;
}

/**
 * Represents the return type of the RatingMouseEvent.
 */
export declare interface RatingMouseEvent {
    /**
     * The target of the RatingMouseEvent from RatingHandle.
     */
    target: RatingHandle;
    /**
     * The event of the RatingMouseEvent.
     */
    syntheticEvent: React.MouseEvent<any>;
}

/**
 * Represents the properties of [Rating](% slug api_inputs_rating %) component.
 */
export declare interface RatingProps extends FormComponentProps {
    /**
     * Sets the `id` property of the top div element of the Rating.
     */
    id?: string;
    /**
     * Sets additional classes to the Rating.
     */
    className?: string;
    /**
     * Sets the `tabIndex` attribute.
     */
    tabIndex?: number;
    /**
     * Sets additional CSS styles to the Rating.
     */
    style?: React_2.CSSProperties;
    /**
     * Determines the children nodes.
     */
    children?: React_2.ReactNode;
    /**
     * Represents the rendered Rating item.
     */
    item?: React_2.ComponentType<RatingItemProps>;
    /**
     * Sets the current value of the Rating, used in controlled mode. [See example]({% slug item_customization_ratingitem %})
     */
    value?: number;
    /**
     * Sets the default value of the Rating, used in uncontrolled mode. [See example]({% slug controlled_rating %})
     */
    defaultValue?: number;
    /**
     * Sets the min possible icon value or star value in the main use-case.
     */
    min?: number;
    /**
     * Sets the max possible icon value or star value in the main use-case.
     */
    max?: number;
    /**
     * Sets the step value between the min and max value.
     */
    step?: number;
    /**
     * Determines the Rating direction `ltr` - by default, or `rtl`.
     */
    dir?: string;
    /**
     * Determines if the Rating has a label and is it a custom one.
     */
    label?: string;
    /**
     * Sets the `readonly` mode of the Rating, if it is set to `true`. [See example]({% slug label_rating %})
     */
    readonly?: boolean;
    /**
     * Sets the `disabled` mode of the Rating, if it is set to `true`. [See example]({% slug readonly_rating %})
     */
    disabled?: boolean;
    /**
     * Sets custom Rating icon, by default - star. [See example]({% slug disabled_rating %})
     */
    icon?: string;
    /**
     * Sets custom Rating SVG icon.
     */
    svgIcon?: SVGIcon;
    /**
     * Sets custom Rating SVG icon.
     */
    svgIconOutline?: SVGIcon;
    /**
     * Determines the selection mode. By default set to `continues`. [See example]({% slug icon_rating %})
     */
    selection?: 'continues' | 'single';
    /**
     * Determines the precision of the Rating. By default set to `item`. [See example]({% slug selection_rating %})
     */
    precision?: 'half' | 'item';
    /**
     * Determines if value represents half icon -> true, or not -> false. [See example]({% slug precision_rating %})
     */
    half?: boolean;
    /**
     * Triggered after value change. Gets outside access to the target element, the new value and the event type.
     */
    onChange?: (event: RatingChangeEvent) => void;
    /**
     * Triggered after `onClick` event. Gets outside access to the target element, the new value and the event type.
     */
    onClick?: (event: RatingItemMouseEvent) => void;
    /**
     * Triggered after `onKeyDown` event. Gets outside access to the target element, the new value and the event type.
     */
    onKeyDown?: (event: RatingKeyboardEvent) => void;
    /**
     * Triggered after `onFocus` event. Gets outside access to the target element and the event type.
     */
    onFocus?: (event: RatingItemFocusEvent) => void;
    /**
     * Triggered after `onBlur` event. Gets outside access to the target element and the event type.
     */
    onBlur?: (event: RatingItemFocusEvent) => void;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
}

/**
 * Represents the PropsContext of the `Rating` component.
 * Used for global configuration of all `Rating` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const RatingPropsContext: React_2.Context<(p: RatingProps) => RatingProps>;

/**
 * @hidden
 */
export declare const ratingReducer: (state: any, action: RatingAction & RatingActionDispatch) => any;

/**
 * @hidden
 */
declare interface RGBA {
    r?: number;
    g?: number;
    b?: number;
    a?: number;
}

/**
 * @hidden
 */
export declare const sanitizeNumber: (state: NumericTextBoxState, format: string | NumberFormatOptions | undefined, intlService: any) => NumericTextBoxState;

/**
 * Represents the [KendoReact Signature component]({% slug overview_signature %}).
 */
export declare const Signature: React_2.ForwardRefExoticComponent<SignatureProps & React_2.RefAttributes<SignatureHandle | null>>;

/**
 * The arguments for the `onBlur` Signature event.
 */
export declare interface SignatureBlurEvent extends BaseEvent<SignatureHandle> {
}

/**
 * The arguments for the `change` event of the Signature.
 */
export declare interface SignatureChangeEvent extends BaseEvent<SignatureHandle> {
    /**
     * The current value of the Signature.
     */
    value: string;
}

/**
 * The arguments for the `onClose` Signature event.
 */
export declare interface SignatureCloseEvent extends BaseEvent<SignatureHandle> {
}

/**
 * The arguments for the `onFocus` Signature event.
 */
export declare interface SignatureFocusEvent extends BaseEvent<SignatureHandle> {
}

/**
 * The Signature ref.
 */
export declare interface SignatureHandle {
    /**
     * The Signature element.
     */
    element: HTMLInputElement | null;
    /**
     * Focus the Signature.
     */
    focus: () => void;
    /**
     * Gets the `name` property of the Signature.
     */
    name: string | undefined;
    /**
     * Gets the value of the Signature.
     */
    value: number | null;
    /**
     * @hidden
     */
    props: SignatureProps;
    /**
     * @hidden
     */
    validityStyles: boolean;
    /**
     * @hidden
     */
    required: boolean;
    /**
     * @hidden
     */
    color: string;
    /**
     * @hidden
     */
    backgroundColor: string;
}

/**
 * The arguments for the `onOpen` Signature event.
 */
export declare interface SignatureOpenEvent extends BaseEvent<SignatureHandle> {
}

/**
 * Represents the props of the [KendoReact Signature component]({% slug overview_signature %}).
 */
export declare interface SignatureProps extends FormComponentProps {
    /**
     * Sets a class of the Signature DOM element.
     */
    className?: string;
    /**
     * Specifies the value of the Signature.
     *
     * The value is an image encoded as a [Data URL](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs).
     */
    value?: string;
    /**
     * Specifies the width of the Signature in pixels.
     */
    width?: number;
    /**
     * Specifies the height of the Signature in pixels.
     */
    height?: number;
    /**
     * Sets the `tabIndex` property of the Signature.
     */
    tabIndex?: number;
    /**
     * Sets the `id` of the Signature DOM element.
     */
    id?: string;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies the name of the Signature input.
     */
    name?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
    /**
     * Determines whether the Signature is in its read-only state.
     */
    readOnly?: boolean;
    /**
     * Determines whether the Signature is in its disabled state.
     */
    disabled?: boolean;
    /**
     * Configures the `size` of the Signature.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the Signature.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `fillMode` of the Signature.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
    /**
     * The stroke color of the signature.
     *
     * Accepts CSS color names and hex values.
     *
     * The default value is determined by the theme `$kendo-input-text` variable.
     */
    color?: string;
    /**
     * The background color of the signature.
     *
     * Accepts CSS color names and hex values.
     *
     * The default value is determined by the theme `$kendo-input-bg` variable.
     */
    backgroundColor?: string;
    /**
     * The stroke width of the signature.
     *
     * @default 1
     */
    strokeWidth?: number;
    /**
     * A flag indicating whether to smooth out signature lines.
     *
     * @default false
     */
    smooth?: boolean;
    /**
     * A flag indicating if the signature can be maximized.
     *
     * @default true
     */
    maximizable?: boolean;
    /**
     * Sets the open and close state of the Signature.
     */
    open?: boolean;
    /**
     * The scale factor for the popup.
     *
     * The Signature width and height will be multiplied by the scale when showing the popup.
     *
     * @default 3
     */
    popupScale?: number;
    /**
     * The scale factor for the exported image.
     *
     * The Signature width and height will be multiplied by the scale when converting the signature to an image.
     *
     * @default 2
     */
    exportScale?: number;
    /**
     * A flag indicating whether the dotted line should be displayed in the background.
     *
     * @default false
     */
    hideLine?: boolean;
    /**
     * Represents the `style` HTML attribute.
     */
    style?: React.CSSProperties;
    /**
     * Represents the input element `style` HTML attribute.
     */
    inputStyle?: React.CSSProperties;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: SignatureChangeEvent) => void;
    /**
     * The event handler that will be fired when Signature is focused.
     */
    onFocus?: (event: SignatureFocusEvent) => void;
    /**
     * The event handler that will be fired when Signature is blurred.
     */
    onBlur?: (event: SignatureBlurEvent) => void;
    /**
     * The event handler that will be fired when Signature popup is open.
     */
    onOpen?: (event: SignatureOpenEvent) => void;
    /**
     * The event handler that will be fired when Signature popup is closed.
     */
    onClose?: (event: SignatureCloseEvent) => void;
    /** @hidden */
    children?: React.ReactNode;
    /** @hidden */
    maximized?: boolean;
}

/**
 * Represents the PropsContext of the `Signature` component.
 * Used for global configuration of all `Signature` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const SignaturePropsContext: React_2.Context<(p: SignatureProps) => SignatureProps>;

/** @hidden */
export declare type Slider = SliderHandle;

/**
 * Represents the [KendoReact Slider component]({% slug overview_slider %}).
 *
 * Accepts properties of type [SliderProps]({% slug api_inputs_sliderprops %}).
 * Obtaining the `ref` returns an object of type [SliderHandle]({% slug api_inputs_sliderhandle %}).
 */
export declare const Slider: React_2.ForwardRefExoticComponent<SliderProps & React_2.RefAttributes<any>>;

/**
 * @hidden
 */
export declare const SLIDER_LABEL_ATTRIBUTE = "data-slider-label";

/**
 * The arguments for the `onChange` Slider event.
 */
export declare interface SliderChangeEvent extends BaseEvent<Slider> {
    /**
     * The current value of the Slider.
     */
    value: number;
}

/**
 * Represent the `ref` of the Slider component.
 */
export declare interface SliderHandle extends Pick<SliderWithoutContext, keyof SliderWithoutContext> {
}

/**
 * Represents the KendoReact SliderLabel component.
 */
export declare const SliderLabel: (props: SliderLabelProps) => JSX_2.Element;

/**
 * Represents the props of the KendoReact SliderLabel component.
 */
export declare interface SliderLabelProps {
    /**
     * The position in relative to the start of the SliderLabel component.
     */
    position: number;
    /**
     * The onClick event of the SliderLabel component.
     */
    onClick?: (event: React_2.MouseEvent<HTMLLIElement>) => void;
    /**
     * The title of the SliderLabel component.
     */
    title?: string;
    /**
     * @hidden
     */
    children?: React_2.ReactNode;
    /**
     * @hidden
     */
    vertical?: boolean;
    /**
     * @hidden
     * Used to identify if a tick is first.
     */
    firstTick?: boolean;
    /**
     * @hidden
     * Used to identify if a tick is last.
     */
    lastTick?: boolean;
}

/**
 * Represents the props of the [KendoReact Slider component]({% slug overview_slider %}).
 */
export declare interface SliderProps extends FormComponentProps {
    children?: React_2.ReactNode;
    /**
     * The value of the Slider.
     */
    value?: number;
    /**
     * The default value of the Slider.
     */
    defaultValue?: number;
    /**
     * The minimum value of the Slider.
     */
    min: number;
    /**
     * The maximum value of the Slider.
     */
    max: number;
    /**
     * Specifies the step of the value increase and decrease.
     */
    step?: number;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: SliderChangeEvent) => void;
    /**
     * The styles that are applied to the Slider.
     */
    style?: React_2.CSSProperties;
    /**
     * Sets additional classes to the Slider.
     */
    className?: string;
    /**
     * Renders the arrow side buttons of the Slider if set to true.
     */
    buttons?: boolean;
    /**
     * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)
     * of the Slider.
     */
    tabIndex?: number;
    /**
     * Determines whether the Slider is disabled.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *    render() {
     *       return (
     *           <Slider disabled={true} min={0} max={10} defaultValue={5} />
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    disabled?: boolean;
    /**
     * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical
     * ([see example]({% slug orientation_slider %})).
     */
    vertical?: boolean;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
    dir?: Direction;
}

/**
 * Represents the PropsContext of the `Slider` component.
 * Used for global configuration of all `Slider` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const SliderPropsContext: React_2.Context<(p: SliderProps) => SliderProps>;

/**
 * @hidden
 */
declare interface SliderState {
    value: number;
    focused: boolean;
    dir?: Direction;
}

/** @hidden */
export declare class SliderWithoutContext extends React_2.Component<SliderProps, SliderState> {
    static displayName: string;
    /**
     * @hidden
     */
    static propTypes: {
        min: PropTypes.Validator<number>;
        max: PropTypes.Validator<number>;
        value: PropTypes.Requireable<number>;
        vertical: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        ariaLabel: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: SliderProps, state: SliderState): {
        value: number;
    } | null;
    /**
     * @hidden
     */
    state: {
        value: number;
        focused: boolean;
        dir: Direction | undefined;
    };
    private _sliderTrack;
    private _element;
    constructor(props: SliderProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    buttons: (props: any) => any;
    /**
     * @hidden
     */
    render(): JSX_2.Element;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    get sliderTrack(): HTMLDivElement | null;
    private isLabel;
    private onFocus;
    private onBlur;
    private onKeyDown;
    private decrement;
    private increment;
    private dragStart;
    private dragOver;
    private drag;
    private change;
}

/** @hidden */
export declare type Switch = SwitchHandle;

/**
 * Represents the [KendoReact Switch component]({% slug overview_switch %}).
 *
 * Accepts properties of type [SwitchProps]({% slug api_inputs_switchprops %}).
 * Obtaining the `ref` returns an object of type [SwitchHandle]({% slug api_inputs_switchhandle %}).
 */
export declare const Switch: React_2.ForwardRefExoticComponent<SwitchProps & React_2.RefAttributes<any>>;

/**
 * The arguments for the `onChange` Switch event.
 */
export declare interface SwitchChangeEvent extends BaseEvent<Switch> {
    /**
     * The new value of the Switch.
     */
    value: boolean;
}

/**
 * Represent the `ref` of the Switch component.
 */
export declare interface SwitchHandle extends Pick<SwitchWithoutContext, keyof SwitchWithoutContext> {
    /**
     * @hidden
     */
    actionElement: HTMLSpanElement | null;
    /**
     * Returns the HTML element of the Switch component.
     */
    element: HTMLSpanElement | null;
    /**
     * Gets the `name` property of the Switch.
     */
    name: string | undefined;
    /**
     * Represents the validity state into which the Switch is set.
     */
    validity: FormComponentValidity;
    /**
     * Gets the value of the Switch.
     */
    value: boolean;
}

/**
 * Represents the props of the [KendoReact Switch component]({% slug overview_switch %}).
 */
export declare interface SwitchProps extends ToggleBaseProps, FormComponentProps {
    /**
     * Specifies the `accessKey` of the Switch.
     */
    accessKey?: string;
    /**
     * Sets the current value of the Switch ([see example]({% slug controlled_switch %})).
     */
    checked?: boolean;
    /**
     * Sets the `className` of the wrapping element of the Switch.
     */
    className?: string;
    /**
     * Sets the value of the Switch when it is initially displayed ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * Sets the default value of the Switch.
     */
    defaultValue?: any;
    /**
     * Disables the Switch when set to `true` ([see example]({% slug disabled_switch %})).
     */
    disabled?: boolean;
    /**
     * Sets the `dir` property of the wrapping element of the Switch.
     */
    dir?: string;
    /**
     * Sets the `id` of the Switch.
     */
    id?: string;
    /**
     * Configures the `size` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `trackRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a trackRounded `className`.
     *
     * @default `full`
     */
    trackRounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `thumbRounded` of the Switch.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a thumbRounded `className`.
     *
     * @default `full`
     */
    thumbRounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Changes the **Off** label([see example]({% slug labels_switch %})).
     */
    offLabel?: string;
    /**
     * Fires each time the Switch gets blurred.
     */
    onBlur?: (event: React_2.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Fires each time the user selects a new value ([see example]({% slug controlled_switch %})).
     */
    onChange?: (event: SwitchChangeEvent) => void;
    /**
     * Fires each time the Switch component gets focused.
     */
    onFocus?: (event: React_2.FocusEvent<HTMLSpanElement>) => void;
    /**
     * Changes the **On** label ([see example]({% slug labels_switch %})).
     */
    onLabel?: string;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex?: number;
    /**
     * Sets the value of the Switch. It can either be of the primitive (string, number, boolean) or of the complex (array) type.
     */
    value?: string | number | string[] | boolean | null;
    /**
     * The accessible label of the component.
     */
    ariaLabel?: string;
}

/**
 * Represents the PropsContext of the `Switch` component.
 * Used for global configuration of all `Switch` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const SwitchPropsContext: React_2.Context<(p: SwitchProps) => SwitchProps>;

/**
 * @hidden
 */
export declare interface SwitchState {
    checked: boolean;
    focused: boolean;
}

/** @hidden */
export declare class SwitchWithoutContext extends React_2.Component<SwitchProps, SwitchState> implements FormComponent {
    static displayName: string;
    /**
     * Gets the value of the Switch.
     */
    get value(): boolean;
    get element(): HTMLSpanElement | null;
    get actionElement(): HTMLSpanElement | null;
    /**
     * Gets the `name` property of the Switch.
     */
    get name(): string | undefined;
    /**
     * Represents the validity state into which the Switch is set.
     */
    get validity(): FormComponentValidity;
    /**
     * @hidden
     */
    protected get validityStyles(): boolean;
    /**
     * @hidden
     */
    protected get required(): boolean;
    /**
     * @hidden
     */
    protected setValidity: () => void;
    protected limit: (offset: number, drag: HTMLSpanElement, wrapper: HTMLSpanElement) => number;
    protected toggle: (value: boolean, event: any) => void;
    /**
     * @hidden
     */
    static propTypes: {
        accessKey: PropTypes.Requireable<string>;
        checked: PropTypes.Requireable<boolean>;
        className: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        defaultChecked: PropTypes.Requireable<boolean>;
        size: PropTypes.Requireable<"small" | "large" | "medium" | null | undefined>;
        trackRounded: PropTypes.Requireable<"small" | "large" | "medium" | "full" | null | undefined>;
        thumbRounded: PropTypes.Requireable<"small" | "large" | "medium" | "full" | null | undefined>;
        dir: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        offLabel: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        valid: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        validationMessage: PropTypes.Requireable<string>;
        onBlur: PropTypes.Requireable<any>;
        onChange: PropTypes.Requireable<any>;
        onFocus: PropTypes.Requireable<any>;
        onLabel: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        disabled: boolean;
        defaultChecked: boolean;
        size: "small" | "large" | "medium" | null | undefined;
        trackRounded: "small" | "large" | "medium" | "full" | null | undefined;
        thumbRounded: "small" | "large" | "medium" | "full" | null | undefined;
        offLabel: string;
        onBlur: () => void;
        onFocus: () => void;
        onLabel: string;
        required: boolean;
        validityStyles: boolean;
    };
    /**
     * @hidden
     */
    readonly state: SwitchState;
    private _element;
    private _wrapper;
    private _input;
    private _id;
    private valueDuringOnChange;
    private dir?;
    private defaultValidationMessage;
    private eventTimeStamp?;
    /**
     * @hidden
     */
    constructor(props: SwitchProps);
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): JSX_2.Element;
    private dummyInput;
    private handleClick;
    private handleKeyDown;
    private handleWrapperFocus;
    private handleWrapperBlur;
}

/**
 * Represents the [KendoReact TextArea component]({% slug overview_textarea %}).
 *
 *
 * Accepts properties of type [TextAreaProps]({% slug api_inputs_textareaprops %}).
 * Obtaining the `ref` returns an object of type [TextAreaHandle]({% slug api_inputs_textareahandle %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <TextArea />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const TextArea: React_2.ForwardRefExoticComponent<TextAreaProps & React_2.RefAttributes<TextAreaHandle | null>>;

/**
 * The arguments for the `onBlur` TextArea event.
 */
export declare interface TextAreaBlurEvent extends BaseEvent<TextAreaHandle> {
}

/**
 * The arguments for the `onChange` TextArea event.
 */
export declare interface TextAreaChangeEvent extends BaseEvent<TextAreaHandle> {
    /**
     * The new value of the TextArea.
     */
    value: string;
}

/**
 * The arguments for the `onFocus` TextArea event.
 */
export declare interface TextAreaFocusEvent extends BaseEvent<TextAreaHandle> {
}

/**
 * @hidden
 */
export declare interface TextAreaHandle {
    element: React_2.RefObject<HTMLTextAreaElement | null>;
    focus: any;
    name?: string | null;
    value?: string;
}

/**
 * Represents the props of the [KendoReact TextArea component]({% slug overview_textarea %}).
 */
export declare interface TextAreaProps extends FormComponentProps, Omit_5<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'defaultValue' | 'onChange' | 'onFocus' | 'onBlur' | 'prefix'> {
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Specifies if the textarea element will resize its height automatically ([see example]({% slug sizing_textarea %})).
     * Defaults to `false`.
     *
     * Setting the value of the prop to `true` will make the TextArea component to ignore the resize behavior of the `resizable` prop.
     */
    autoSize?: boolean;
    /**
     * Specifies a list of CSS classes that will be added to the TextArea.
     */
    className?: string;
    /**
     * The default value of the TextArea ([see example]({% slug default_textarea %})).
     */
    defaultValue?: string | string[] | number;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Specifies if the TextArea is disabled ([see example]({% slug disabled_textarea %})).
     */
    disabled?: boolean;
    /**
     * Sets the read-only state of the TextArea.
     */
    readOnly?: boolean;
    /**
     * Specifies an exact height size for the TextArea to take ([see example]({% slug sizing_textarea %})).
     */
    rows?: number;
    /**
     * Sets the `id` of the TextArea.
     */
    id?: string;
    /**
     * Specifies the `name` property of the `textarea` DOM element.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    name?: string;
    /**
     * The hint that is displayed when the TextArea is empty.
     */
    placeholder?: string;
    /**
     * Sets additional CSS styles to the TextArea.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the TextArea.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * Sets the value to be submitted ([see example]({% slug controlled_textarea %})).
     */
    value?: string | string[] | number;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: TextAreaChangeEvent) => void;
    /**
     * The event handler that will be fired when TextArea is focused.
     */
    onFocus?: (event: TextAreaFocusEvent) => void;
    /**
     * The event handler that will be fired when TextArea is blurred.
     */
    onBlur?: (event: TextAreaBlurEvent) => void;
    /**
     * Configures the `size` of the TextArea.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the TextArea.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the TextArea.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
    /**
     * Sets a custom prefix to the TextArea component.
     */
    prefix?: CustomComponent<any>;
    /**
     * Sets a custom suffix to the TextArea component.
     */
    suffix?: CustomComponent<any>;
    /**
     * Defines the resize behavior of the TextArea.
     * The available options are:
     * - none &mdash; The TextArea cannot be resized.
     * - vertical &mdash; The TextArea can be resized vertically.
     * - horizontal &mdash; The TextArea can be resized horizontally.
     * - both(default) &mdash; The TextArea can be resized both vertically and horizontally.
     *
     *
     * To be able to resize the TextArea, you should not set the `autoSize` property to `true`.
     * To be able to resize the component horizontally, add the following inline style to the TextArea:
     *
     * ```html
     * <TextArea resizable='horizontal' style={{width: 'auto'}}  />
     * ```
     */
    resizable?: 'none' | 'vertical' | 'horizontal' | 'both';
}

/**
 * Represents the PropsContext of the `TextArea` component.
 * Used for global configuration of all `TextArea` instances.
 *
 * For more information, refer to the [Inputs Props Context]({% slug props-context_inputs %}) article.
 */
export declare const TextAreaPropsContext: React_2.Context<(p: TextAreaProps) => TextAreaProps>;

/**
 * Represents the [KendoReact TextBox component]({% slug overview_textbox %}).
 */
export declare const TextBox: React_2.ForwardRefExoticComponent<TextBoxProps & React_2.RefAttributes<TextBoxHandle | null>>;

export declare interface TextBoxChangeEvent extends BaseEvent<TextBoxHandle> {
    syntheticEvent: React_2.ChangeEvent<HTMLInputElement>;
    value: React_2.InputHTMLAttributes<HTMLInputElement>['value'];
}

/**
 * Represent the `ref` of the TextBox component.
 */
export declare type TextBoxHandle = {
    element: HTMLInputElement | null;
    value: TextBoxProps['value'];
    name?: string | null;
};

/**
 * Represents the properties of the KendoReact [TextBox]({% slug api_inputs_textbox %}) component
 */
export declare interface TextBoxProps extends Omit<React_2.InputHTMLAttributes<HTMLInputElement>, 'size' | 'prefix' | 'onChange'> {
    /**
     * Configures the `size` of the TextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - null&mdash;Does not set a size `className`.
     *
     * @default `medium`
     */
    size?: null | 'small' | 'medium' | 'large';
    /**
     * Configures the `roundness` of the TextBox.
     *
     * The available options are:
     * - small
     * - medium
     * - large
     * - full
     * - null&mdash;Does not set a rounded `className`.
     *
     * @default `medium`
     */
    rounded?: null | 'small' | 'medium' | 'large' | 'full';
    /**
     * Configures the `fillMode` of the TextBox.
     *
     * The available options are:
     * - solid
     * - outline
     * - flat
     * - null&mdash;Does not set a fillMode `className`.
     *
     * @default `solid`
     */
    fillMode?: null | 'solid' | 'flat' | 'outline';
    /**
     * The `onChange` callback of the `input` element inside the TextBox.
     */
    onChange?: (event: TextBoxChangeEvent) => void;
    /**
     * Indicates if the component is in `valid` state
     */
    valid?: boolean;
    /**
     * Sets a custom prefix to the TextBox component.
     */
    prefix?: CustomComponent<any>;
    /**
     * Sets a custom suffix to the TextBox component.
     */
    suffix?: CustomComponent<any>;
}

/**
 * Specifies the size of a color cell.
 *
 * The possible values are:
 * * (Default) `number = 24`
 * * `{ width: number, height: number }`
 */
declare type TileSize = {
    width: number;
    height: number;
};

/**
 * The props passed to the Checkbox and Switch components.
 */
export declare interface ToggleBaseProps {
    value?: any;
    checked?: any;
    defaultChecked?: any;
}

/**
 * @hidden
 */
export declare const toRound: (num: number, base: number) => number;

export { }
