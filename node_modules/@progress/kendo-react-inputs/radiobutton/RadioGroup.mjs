/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import e from "prop-types";
import { RadioButton as M } from "./RadioButton.mjs";
import { createPropsContext as q, validatePackage as A, usePropsContext as J, focusFirstFocusableChild as Q, dispatchEvent as v, useId as U, classNames as g, useRtl as W } from "@progress/kendo-react-common";
import { packageMetadata as X } from "../package-metadata.mjs";
const Y = q(), P = t.forwardRef((r, R) => {
  A(X);
  const m = J(Y, r), {
    id: E,
    ariaLabelledBy: I,
    ariaDescribedBy: N,
    className: B,
    data: b,
    defaultValue: F,
    disabled: l,
    name: x,
    labelPlacement: G,
    layout: n,
    style: V,
    value: p,
    valid: O,
    item: j = Z.item,
    onChange: c,
    onFocus: i
  } = m, o = t.useRef(null), f = t.useCallback(
    () => {
      o.current && Q(o.current);
    },
    []
  ), d = t.useCallback(
    () => ({
      element: o.current,
      focus: f
    }),
    [f]
  );
  t.useImperativeHandle(R, d);
  const [z, y] = t.useState(F), C = p !== void 0, u = C ? p : z, D = t.useCallback(
    (a) => {
      let s = a.value;
      !C && !l && y(s), c && !l && v(
        c,
        a.syntheticEvent,
        d(),
        { value: s }
      );
    },
    [y, c, l]
  ), H = t.useCallback(
    (a) => {
      i && !l && v(
        i,
        a.syntheticEvent,
        d(),
        void 0
      );
    },
    [i, l]
  ), L = U(), S = g(
    "k-radio-list",
    {
      "k-list-horizontal": n === "horizontal",
      "k-list-vertical": n === "vertical" || n === void 0
    },
    B
  ), T = W(o, m.dir), w = b && b.map((a, s) => {
    const h = u === a.value, K = u == null, k = {
      ...a,
      valid: O,
      checked: h,
      disabled: !!(a.disabled || l),
      labelPlacement: a.labelPlacement ? a.labelPlacement : G,
      tabIndex: a.tabIndex ? a.tabIndex : K && s === 0 || h ? 0 : -1,
      index: s,
      name: x || L,
      onChange: D,
      onFocus: H
    };
    return /* @__PURE__ */ t.createElement(
      j,
      {
        className: g("k-radio-list-item", { "k-disabled": k.disabled || l }),
        key: s,
        role: "none"
      },
      /* @__PURE__ */ t.createElement(M, { ...k })
    );
  });
  return /* @__PURE__ */ t.createElement(
    "ul",
    {
      id: E,
      role: "radiogroup",
      className: S,
      ref: o,
      dir: T,
      style: V,
      "aria-labelledby": I,
      "aria-describedby": N
    },
    w
  );
}), Z = {
  item: (r) => /* @__PURE__ */ t.createElement("li", { ...r })
};
P.propTypes = {
  ariaLabelledBy: e.string,
  ariaDescribedBy: e.string,
  className: e.string,
  data: e.arrayOf(e.object),
  defaultValue: e.any,
  dir: e.string,
  disabled: e.bool,
  labelPlacement: e.string,
  layout: e.string,
  name: e.string,
  style: e.object,
  value: e.any,
  onChange: e.func,
  onFocus: e.func
};
P.displayName = "KendoRadioGroup";
export {
  P as RadioGroup,
  Y as RadioGroupPropsContext
};
