/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as n from "react";
import t from "prop-types";
import { useInternationalization as Je, useLocalization as Qe } from "@progress/kendo-react-intl";
import { createPropsContext as Xe, validatePackage as Ze, usePropsContext as et, useId as tt, useCustomComponent as pe, dispatchEvent as Q, getActiveElement as be, useIsomorphicLayoutEffect as nt, classNames as rt, kendoThemeMaps as ge, getTabIndex as at } from "@progress/kendo-react-common";
import { caretAltUpIcon as lt, caretAltDownIcon as st } from "@progress/kendo-svg-icons";
import { FloatingLabel as ot } from "@progress/kendo-react-labels";
import { packageMetadata as ut } from "../package-metadata.mjs";
import { numericIncreaseValue as M, messages as F, numericDecreaseValue as T } from "../messages/index.mjs";
import { getInitialState as ve, formatValue as z, getStateOrPropsValue as X, rangeValue as G, sanitizeNumber as ye, decreaseValue as Ve, increaseValue as ke } from "./utils/index.mjs";
import { Button as Ce } from "@progress/kendo-react-buttons";
const it = "Please enter a valid value!", ct = Xe(), Ee = n.forwardRef((C, Se) => {
  Ze(ut);
  const q = et(ct, C), {
    className: xe,
    value: b,
    defaultValue: he,
    format: l,
    width: Z,
    tabIndex: Ie,
    accessKey: Oe,
    title: Le,
    placeholder: ee,
    min: c,
    max: d,
    dir: te,
    name: j,
    label: I,
    id: Pe,
    ariaDescribedBy: Ne,
    ariaLabelledBy: De,
    ariaLabel: Re,
    inputType: Be,
    readOnly: g,
    validationMessage: A,
    children: Me,
    style: ne,
    inputStyle: Fe,
    valid: _,
    step: v = i.step,
    spinners: Te = i.spinners,
    disabled: o = i.disabled,
    required: H = i.required,
    validityStyles: re = i.validityStyles,
    prefix: ze = i.prefix,
    suffix: Ge = i.suffix,
    onChange: E = i.onChange,
    onFocus: ae = i.onFocus,
    onBlur: le = i.onBlur,
    rangeOnEnter: se = i.rangeOnEnter,
    size: K = i.size,
    rounded: w = i.rounded,
    fillMode: O = i.fillMode,
    ...oe
  } = q, qe = tt(), ue = Pe || qe, s = Je(), L = Qe(), a = n.useRef(null), P = n.useRef(), [je, S] = n.useState(!1), u = n.useRef(ve()), N = n.useRef(!1), U = n.useRef(), x = n.useRef(he), h = z(
    u.current.focused && !o ? u.current.currentLooseValue : X(b, x.current),
    l,
    s
  );
  U.current = h;
  const [Ae] = pe(ze), [_e] = pe(Ge);
  n.useEffect(
    () => {
      a.current && a.current.setCustomValidity && a.current.setCustomValidity(
        B().valid ? "" : A || it
      );
    }
  );
  const ie = n.useCallback(
    () => {
      a.current && a.current.focus();
    },
    []
  ), D = n.useCallback(
    () => P.current !== void 0 ? P.current : X(b, x.current),
    [b]
  ), ce = n.useCallback(
    () => j,
    [j]
  ), R = n.useCallback(
    () => H,
    [H]
  ), B = n.useCallback(
    () => {
      const r = A !== void 0, e = D(), V = _ !== void 0 ? _ : !u.current.valueIsOutOfRange && (!R() || e != null);
      return {
        customError: r,
        valid: V,
        valueMissing: e == null
      };
    },
    [A, _, D, R]
  ), $ = n.useCallback(
    () => re,
    [re]
  ), de = n.useCallback(
    () => q,
    [q]
  ), y = n.useCallback(
    () => {
      const r = {
        element: a.current,
        focus: ie
      };
      return Object.defineProperty(r, "name", { get: ce }), Object.defineProperty(r, "value", { get: D }), Object.defineProperty(r, "validity", { get: B }), Object.defineProperty(r, "validityStyles", { get: $ }), Object.defineProperty(r, "required", { get: R }), Object.defineProperty(r, "props", { get: de }), r;
    },
    [ce, D, B, $, R, ie, de]
  );
  n.useImperativeHandle(Se, y);
  const f = n.useCallback(
    () => ({
      eventValue: X(b, x.current),
      prevLooseValue: U.current,
      currentLooseValue: a.current.value,
      selectionStart: a.current.selectionStart,
      selectionEnd: a.current.selectionEnd,
      decimalSelect: !1,
      valueIsCorrected: !1,
      valueIsOutOfRange: !1,
      isPaste: N.current,
      focused: u.current.focused
    }),
    [b]
  ), p = n.useCallback(
    (r, e) => {
      if (o)
        return;
      P.current = e.eventValue, x.current = e.eventValue;
      const V = z(G(e.eventValue, c, d), l, s), m = G(s.parseNumber(V, l), c, d);
      m !== e.eventValue && (e.valueIsOutOfRange = !0, e.eventValue = m, x.current = m), b !== e.eventValue && Q(
        E,
        r,
        y(),
        { value: e.eventValue }
      ), P.current = void 0, u.current = e, S((J) => !J);
    },
    [b, E, o, S, y]
  ), He = n.useCallback(
    (r) => {
      const e = f();
      N.current = !1, p(r, ye(e, l, s));
    },
    [l, E, s, p, f]
  ), Ke = n.useCallback(
    (r) => {
      let e = f();
      const V = s.parseNumber(String(e.currentLooseValue), l);
      if (e.selectionEnd > e.selectionStart && e.selectionEnd - e.selectionStart === String(e.currentLooseValue).length) {
        const m = s.numberSymbols(), k = m && r.key === m.minusSign, J = m && r.key === m.decimal;
        N.current = !k && !J;
        return;
      }
      switch (r.keyCode) {
        case 38:
          ke(
            V,
            e,
            v,
            c,
            d,
            l,
            s
          );
          break;
        case 40:
          Ve(
            V,
            e,
            v,
            c,
            d,
            l,
            s
          );
          break;
        case 13: {
          if (se === !1)
            return;
          const m = z(G(V, c, d), l, s), k = G(s.parseNumber(m, l), c, d);
          e.eventValue = k, e.currentLooseValue = z(k, l, s), e.selectionStart = e.selectionEnd = e.currentLooseValue.length;
          break;
        }
        case 110: {
          const m = a.current, k = s.numberSymbols();
          m && (e.currentLooseValue = e.currentLooseValue.slice(0, e.selectionStart) + k.decimal + e.currentLooseValue.slice(e.selectionEnd), e.selectionStart = e.selectionEnd = e.selectionStart + 1, e = ye(e, l, s));
          break;
        }
        default:
          return;
      }
      r.preventDefault(), p(r, e);
    },
    [l, c, d, v, E, se, p, f]
  ), we = n.useCallback(
    () => {
      N.current = !0;
    },
    []
  ), W = n.useCallback(
    (r) => {
      if (g || o)
        return;
      const e = f();
      ke(
        s.parseNumber(String(e.currentLooseValue), l),
        e,
        v,
        c,
        d,
        l,
        s
      ), p(r, e);
    },
    [l, c, d, v, E, g, o, p, f]
  ), Y = n.useCallback(
    (r) => {
      if (g || o)
        return;
      const e = f();
      Ve(
        s.parseNumber(String(e.currentLooseValue), l),
        e,
        v,
        c,
        d,
        l,
        s
      ), p(r, e);
    },
    [l, c, d, v, E, g, o, p, f]
  ), Ue = n.useCallback(
    (r) => {
      const e = be(document);
      !document || e !== a.current || !a.current || g || o || (r.nativeEvent.deltaY < 0 && W(r), r.nativeEvent.deltaY > 0 && Y(r));
    },
    [W, Y, o, g]
  ), $e = n.useCallback(
    (r) => {
      u.current.currentLooseValue = U.current, u.current.focused = !0, Q(
        ae,
        r,
        y(),
        {}
      ), S((e) => !e);
    },
    [ae, S, y]
  ), We = n.useCallback(
    (r) => {
      u.current = ve(), Q(
        le,
        r,
        y(),
        {}
      ), S((e) => !e);
    },
    [le, S, y]
  ), Ye = n.useCallback(
    (r) => {
      if (document && a.current) {
        const e = be(document);
        r.preventDefault(), e !== a.current && a.current.focus();
      }
    },
    []
  );
  nt(
    () => {
      a.current && a.current.type !== "number" && u.current.selectionStart !== void 0 && u.current.selectionEnd !== void 0 && (a.current.selectionStart = u.current.selectionStart, a.current.selectionEnd = u.current.selectionEnd, u.current.selectionStart = void 0, u.current.selectionEnd = void 0);
    },
    [je]
  );
  const me = !$() || B().valid, fe = /* @__PURE__ */ n.createElement(
    "span",
    {
      dir: te,
      style: I ? ne : { width: Z, ...ne },
      className: rt(
        "k-input",
        "k-numerictextbox",
        {
          [`k-input-${ge.sizeMap[K] || K}`]: K,
          [`k-input-${O}`]: O,
          [`k-rounded-${ge.roundedMap[w] || w}`]: w,
          "k-invalid": !me,
          "k-required": H,
          "k-disabled": o
        },
        xe
      ),
      "aria-disabled": o ? "true" : void 0,
      ...I ? {} : oe
    },
    /* @__PURE__ */ n.createElement(Ae, null),
    /* @__PURE__ */ n.createElement(
      "input",
      {
        role: "spinbutton",
        value: h === null ? "" : h,
        tabIndex: at(Ie, o),
        accessKey: Oe,
        disabled: o,
        title: Le,
        "aria-disabled": o ? "true" : void 0,
        "aria-valuemin": c,
        "aria-valuemax": d,
        "aria-label": Re,
        "aria-labelledby": De,
        "aria-describedby": Ne,
        placeholder: ee,
        spellCheck: !1,
        autoComplete: "off",
        autoCorrect: "off",
        type: Be || "tel",
        className: "k-input-inner",
        id: ue,
        name: j,
        readOnly: g,
        style: Fe,
        onChange: He,
        onFocus: $e,
        onBlur: We,
        onKeyDown: Ke,
        onPaste: we,
        onWheel: Ue,
        ref: a
      }
    ),
    /* @__PURE__ */ n.createElement(_e, null),
    Me,
    Te && /* @__PURE__ */ n.createElement(
      "span",
      {
        className: "k-input-spinner k-spin-button",
        onMouseDown: Ye
      },
      /* @__PURE__ */ n.createElement(
        Ce,
        {
          tabIndex: -1,
          type: "button",
          icon: "caret-alt-up",
          svgIcon: lt,
          rounded: null,
          fillMode: O,
          className: "k-spinner-increase",
          "aria-label": L.toLanguageString(M, F[M]),
          title: L.toLanguageString(M, F[M]),
          onClick: W
        }
      ),
      /* @__PURE__ */ n.createElement(
        Ce,
        {
          tabIndex: -1,
          type: "button",
          icon: "caret-alt-down",
          svgIcon: st,
          rounded: null,
          fillMode: O,
          className: "k-spinner-decrease",
          "aria-label": L.toLanguageString(T, F[T]),
          title: L.toLanguageString(T, F[T]),
          onClick: Y
        }
      )
    )
  );
  return I ? /* @__PURE__ */ n.createElement(
    ot,
    {
      label: I,
      editorId: ue,
      editorValue: h === null ? "" : h,
      editorValid: me,
      editorDisabled: o,
      editorPlaceholder: ee,
      children: fe,
      style: { width: Z },
      dir: te,
      ...oe
    }
  ) : fe;
});
Ee.propTypes = {
  value: t.number,
  defaultValue: t.number,
  step: t.number,
  format: t.oneOfType([
    t.string,
    t.shape({
      style: t.oneOf(["decimal", "currency", "percent", "scientific", "accounting"]),
      currency: t.string,
      currencyDisplay: t.oneOf(["symbol", "code", "name"]),
      useGrouping: t.bool,
      minimumIntegerDigits: t.number,
      minimumFractionDigits: t.number,
      maximumFractionDigits: t.number
    })
  ]),
  width: t.oneOfType([
    t.string,
    t.number
  ]),
  tabIndex: t.number,
  accessKey: t.string,
  title: t.string,
  placeholder: t.string,
  min: t.number,
  max: t.number,
  spinners: t.bool,
  disabled: t.bool,
  readOnly: t.bool,
  dir: t.string,
  name: t.string,
  label: t.string,
  validationMessage: t.string,
  required: t.bool,
  id: t.string,
  rangeOnEnter: t.bool,
  ariaLabelledBy: t.string,
  ariaDescribedBy: t.string,
  ariaLabel: t.string,
  onChange: t.func,
  onFocus: t.func,
  onBlur: t.func,
  size: t.oneOf([null, "small", "medium", "large"]),
  rounded: t.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: t.oneOf([null, "solid", "flat", "outline"])
};
const i = {
  prefix: (C) => null,
  suffix: (C) => null,
  step: 1,
  spinners: !0,
  disabled: !1,
  required: !1,
  validityStyles: !0,
  rangeOnEnter: !0,
  onChange: (C) => {
  },
  onFocus: (C) => {
  },
  onBlur: (C) => {
  },
  size: "medium",
  rounded: "medium",
  fillMode: "solid"
};
Ee.displayName = "KendoNumericTextBox";
export {
  Ee as NumericTextBox,
  ct as NumericTextBoxPropsContext
};
