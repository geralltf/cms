/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as o from "react";
import i from "prop-types";
import { focusFirstFocusableChild as E, validatePackage as F, getTabIndex as u, classNames as H, Draggable as L, createPropsContext as D, withIdHOC as N, withPropsContext as A } from "@progress/kendo-react-common";
import { packageMetadata as B } from "../package-metadata.mjs";
import { Slider as m } from "../slider/Slider.mjs";
import { fitIntoBounds as C, isPresent as v } from "./utils/misc.mjs";
import { getHSV as g, getColorFromHue as d, getRGBA as c, getColorFromRGBA as P, parseColor as l, getColorFromHSV as w } from "./utils/color-parser.mjs";
import { cacheHex as I, cacheRgba as M, removeCachedColor as T, cacheHsva as V, getCachedHsva as G, getCachedRgba as O, getCachedHex as U } from "./utils/color-cache.mjs";
import j from "./ColorInput.mjs";
import { ColorContrastLabels as W } from "./ColorContrastLabels.mjs";
import { ColorContrastSvg as $ } from "./ColorContrastSvg.mjs";
import { provideLocalizationService as X } from "@progress/kendo-react-intl";
import { colorGradientHueSliderLabel as f, messages as k, colorGradientAlphaSliderLabel as S } from "../messages/index.mjs";
const Y = "rgba", R = "rgba(255, 255, 255, 1)", h = class h extends o.Component {
  constructor(e) {
    super(e), this.wrapper = null, this.onHexChange = (t, s, r) => {
      if (this.isUncontrolled) {
        const n = g(s);
        this.setState({ hsva: n, backgroundColor: d(n.h), rgba: c(s), hex: t });
      } else
        I(this.state.guid, s, t);
      this.dispatchChangeEvent(s, r, r.nativeEvent);
    }, this.onRgbaChange = (t, s) => {
      const r = P(t);
      if (this.isUncontrolled) {
        const n = g(r), p = l(r, "hex");
        this.setState({ hsva: n, backgroundColor: d(n.h), rgba: t, hex: p });
      } else
        M(this.state.guid, r, t);
      this.dispatchChangeEvent(r, s.syntheticEvent, s.nativeEvent);
    }, this.onAlphaSliderChange = (t) => {
      this.handleHsvaChange(
        Object.assign({}, this.state.hsva, { a: t.value / 100 }),
        t.syntheticEvent,
        t.nativeEvent
      );
    }, this.onHueSliderChange = (t) => {
      this.handleHsvaChange(
        Object.assign({}, this.state.hsva, { h: t.value }),
        t.syntheticEvent,
        t.nativeEvent
      );
    }, this.onDrag = (t) => {
      this.gradientWrapper.classList.add("k-dragging"), this.changePosition(t.event);
    }, this.onRelease = () => {
      this.gradientWrapper.classList.remove("k-dragging");
    }, this.onGradientWrapperClick = (t) => {
      this.changePosition(t);
    }, this.changePosition = (t) => {
      const s = this.getGradientRectMetrics(), r = t.clientX - s.left, n = t.clientY - s.top, p = C(r, 0, s.width), x = C(n, 0, s.height), y = Object.assign(
        {},
        this.state.hsva,
        { s: p / s.width, v: 1 - x / s.height }
      );
      this.handleHsvaChange(y, t, t.nativeEvent);
    }, this.onFocus = (t) => {
      this.props.onFocus && this.props.onFocus.call(
        void 0,
        { nativeEvent: t, target: this }
      );
    }, this.focus = () => {
      this.wrapper && E(this.wrapper);
    }, F(B);
    const a = e.value || e.defaultValue || l(R, Y);
    this.state = Object.assign({}, h.getStateFromValue(a), { isFirstRender: !0, guid: this.props.id });
  }
  /**
   * @hidden
   */
  static getDerivedStateFromProps(e, a) {
    return e.value && !a.isFirstRender ? h.getStateFromValue(e.value, a.guid) : null;
  }
  /**
   * @hidden
   */
  componentDidMount() {
    this.setAlphaSliderBackground(this.state.backgroundColor), this.state.isFirstRender && this.setState({ isFirstRender: !1 });
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    T(this.state.guid);
  }
  /**
   * @hidden
   */
  componentDidUpdate(e, a) {
    a.backgroundColor !== this.state.backgroundColor && this.setAlphaSliderBackground(this.state.backgroundColor);
  }
  /**
   * @hidden
   */
  renderRectangleDragHandle() {
    let e = {};
    if (!this.state.isFirstRender) {
      const a = this.getGradientRectMetrics(), t = (1 - this.state.hsva.v) * a.height, s = this.state.hsva.s * a.width;
      e.top = `${t}px`, e.left = `${s}px`;
    }
    return /* @__PURE__ */ o.createElement(
      "div",
      {
        role: "slider",
        tabIndex: u(this.props.tabIndex, this.props.disabled),
        "aria-valuetext": this.props.ariaValueText,
        "aria-valuenow": parseInt(this.state.hex.substring(1), 16),
        "aria-label": this.props.ariaLabelHSV,
        "aria-orientation": void 0,
        "aria-disabled": this.props.disabled ? "true" : void 0,
        className: "k-hsv-draghandle k-draghandle",
        style: e
      }
    );
  }
  /**
   * @hidden
   */
  handleHsvaChange(e, a, t) {
    const s = w(e);
    if (this.isUncontrolled) {
      const r = l(s, "hex");
      this.setState({ hsva: e, backgroundColor: d(e.h), rgba: c(s), hex: r });
    } else
      V(this.state.guid, s, e);
    this.dispatchChangeEvent(s, a, t);
  }
  /**
   * @hidden
   */
  dispatchChangeEvent(e, a, t) {
    this.props.onChange && this.props.onChange.call(
      void 0,
      { syntheticEvent: a, nativeEvent: t, target: this, value: e }
    );
  }
  /**
   * @hidden
   */
  static getStateFromValue(e, a) {
    v(l(e, "hex")) || (e = R);
    const t = G(a, e) || g(e), s = O(a, e) || c(e), r = U(a, e) || l(e, "hex"), n = d(t.h);
    return { hsva: t, backgroundColor: n, rgba: s, hex: r };
  }
  /**
   * @hidden
   */
  setAlphaSliderBackground(e) {
    this.props.opacity && this.alphaSlider && this.alphaSlider.sliderTrack && (this.alphaSlider.sliderTrack.style.background = `linear-gradient(to top, transparent, ${e})`);
  }
  /**
   * @hidden
   */
  get isUncontrolled() {
    return this.props.value === void 0;
  }
  /**
   * @hidden
   */
  getGradientRectMetrics() {
    return this.gradientWrapper.getBoundingClientRect();
  }
  /**
   * @hidden
   */
  render() {
    const e = X(this), a = H("k-colorgradient", { "k-disabled": this.props.disabled }, this.props.className);
    return /* @__PURE__ */ o.createElement(
      "div",
      {
        id: this.props.id,
        role: this.props.role,
        className: a,
        "aria-disabled": this.props.disabled ? "true" : void 0,
        style: this.props.style,
        ref: (t) => this.wrapper = t,
        tabIndex: u(this.props.tabIndex, this.props.disabled),
        "aria-label": this.props.ariaLabel,
        "aria-labelledby": this.props.ariaLabelledBy,
        "aria-describedby": this.props.ariaDescribedBy,
        onFocus: this.onFocus
      },
      /* @__PURE__ */ o.createElement("div", { className: "k-colorgradient-canvas k-hstack" }, /* @__PURE__ */ o.createElement("div", { className: "k-hsv-rectangle", style: { background: this.state.backgroundColor } }, /* @__PURE__ */ o.createElement(
        L,
        {
          onDrag: this.onDrag,
          onRelease: this.onRelease,
          ref: (t) => this.gradientWrapper = t ? t.element : void 0
        },
        /* @__PURE__ */ o.createElement(
          "div",
          {
            className: "k-hsv-gradient",
            style: { touchAction: "none" },
            onClick: this.onGradientWrapperClick
          },
          this.renderRectangleDragHandle()
        )
      ), this.props.backgroundColor && !this.state.isFirstRender && /* @__PURE__ */ o.createElement(
        $,
        {
          metrics: this.gradientWrapper ? this.getGradientRectMetrics() : void 0,
          hsva: this.state.hsva,
          backgroundColor: this.props.backgroundColor
        }
      )), /* @__PURE__ */ o.createElement("div", { className: "k-hsv-controls k-hstack" }, /* @__PURE__ */ o.createElement(
        m,
        {
          value: this.state.hsva.h,
          buttons: !1,
          vertical: !0,
          min: 0,
          max: 360,
          step: 5,
          onChange: this.onHueSliderChange,
          className: "k-hue-slider k-colorgradient-slider",
          disabled: this.props.disabled,
          ariaLabel: e.toLanguageString(f, k[f])
        }
      ), this.props.opacity && /* @__PURE__ */ o.createElement(
        m,
        {
          value: v(this.state.hsva.a) ? this.state.hsva.a * 100 : 100,
          buttons: !1,
          vertical: !0,
          min: 0,
          max: 100,
          step: 1,
          ariaLabel: e.toLanguageString(S, k[S]),
          onChange: this.onAlphaSliderChange,
          className: "k-alpha-slider k-colorgradient-slider",
          disabled: this.props.disabled,
          ref: (t) => this.alphaSlider = t
        }
      ))),
      /* @__PURE__ */ o.createElement(
        j,
        {
          rgba: this.state.rgba,
          onRgbaChange: this.onRgbaChange,
          hex: this.state.hex,
          onHexChange: this.onHexChange,
          opacity: this.props.opacity,
          disabled: this.props.disabled,
          defaultInputMode: this.props.format
        }
      ),
      this.props.backgroundColor && /* @__PURE__ */ o.createElement(
        W,
        {
          bgColor: c(this.props.backgroundColor),
          rgba: this.state.rgba
        }
      )
    );
  }
};
h.displayName = "ColorGradient", h.propTypes = {
  defaultValue: i.string,
  value: i.string,
  onChange: i.func,
  onFocus: i.func,
  opacity: i.bool,
  backgroundColor: i.string,
  format: i.any,
  disabled: i.bool,
  style: i.any,
  id: i.string,
  role: i.string,
  ariaLabel: i.string,
  ariaLabelledBy: i.string,
  ariaDescribedBy: i.string,
  className: i.string
}, h.defaultProps = {
  opacity: !0,
  role: "textbox",
  format: "rgb"
};
let b = h;
const z = D(), K = N(A(z, b));
K.displayName = "KendoReactColorGradient";
export {
  K as ColorGradient,
  z as ColorGradientPropsContext,
  b as ColorGradientWithoutContext
};
