/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as i from "react";
import { parseColor as o } from "./utils/color-parser.mjs";
import { isPresent as a } from "./utils/misc.mjs";
import { Input as n } from "../input/Input.mjs";
class p extends i.Component {
  constructor(e) {
    super(e), this.onChange = (t) => {
      const r = t.target.value, s = o(r, "rgba");
      this.setState({ hex: r }), a(s) && this.props.onHexChange(r, s, t);
    }, this.onBlur = () => {
      a(o(this.state.hex, "rgba")) || this.setState({ hex: this.state.originalHex });
    }, this.state = { hex: this.props.hex, originalHex: this.props.hex };
  }
  render() {
    return /* @__PURE__ */ i.createElement(
      n,
      {
        value: this.state.hex,
        onChange: this.onChange,
        onBlur: this.onBlur,
        disabled: this.props.disabled
      }
    );
  }
  static getDerivedStateFromProps(e, t) {
    return e.hex !== t.originalHex ? { hex: e.hex, originalHex: e.hex } : null;
  }
}
export {
  p as default
};
