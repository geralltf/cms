/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
const d = (e, t) => e.length === 0 ? "" : `<path d="${e.reduce(
  (n, c, o, h) => o === 0 ? (
    // if first point
    `M ${c[0]},${c[1]}`
  ) : (
    // else
    `${n} ${t(c, o, h)}`
  ),
  ""
)}" fill="none" stroke="white" stroke-width="1"/>`, u = (e, t) => {
  const s = t[0] - e[0], n = t[1] - e[1];
  return {
    length: Math.sqrt(Math.pow(s, 2) + Math.pow(n, 2)),
    angle: Math.atan2(n, s)
  };
}, w = (e) => (t, s, n, c) => {
  const o = s || t, h = n || t, l = 0.1, a = e(o, h), r = a.angle + (c ? Math.PI : 0), $ = a.length * l, g = t[0] + Math.cos(r) * $, M = t[1] + Math.sin(r) * $;
  return [g, M];
}, m = (e) => (t, s, n) => {
  const [c, o] = e(n[s - 1], n[s - 2], t), [h, l] = e(t, n[s - 1], n[s + 1], !0);
  return `C ${c},${o} ${h},${l} ${t[0]},${t[1]}`;
};
export {
  m as bezierCommand,
  w as controlPoint,
  u as line,
  d as svgPath
};
