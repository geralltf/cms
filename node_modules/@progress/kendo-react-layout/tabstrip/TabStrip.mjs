/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import l from "prop-types";
import { TabStripNavigation as h } from "./TabStripNavigation.mjs";
import { TabStripContent as b } from "./TabStripContent.mjs";
import { validatePackage as u, shouldShowValidationUI as g, Navigation as S, classNames as y, WatermarkOverlay as x } from "@progress/kendo-react-common";
import { packageMetadata as m } from "../package-metadata.mjs";
const d = class d extends a.Component {
  constructor(s) {
    super(s), this.tabStripRef = a.createRef(), this.showLicenseWatermark = !1, this.onSelect = (n) => {
      this.props.selected !== n && this.props.onSelect && this.props.onSelect({
        selected: n
      });
    }, this.onKeyDown = (n) => {
      this.navigation.triggerKeyboardEvent(n);
    }, this.onKeyboardSelect = (n) => {
      const i = this.children();
      i && i[n].props.disabled || this.onSelect(n);
    }, this.renderContent = (n) => {
      const { selected: i, children: t, tabContentStyle: e } = n, r = a.Children.count(t);
      return i < r && i > -1 ? /* @__PURE__ */ a.createElement(b, { index: i, ...n, style: e }) : null;
    }, u(m), this.showLicenseWatermark = g(m);
  }
  get contentPanelId() {
    return this.props.id + "-content-panel-id";
  }
  get navItemId() {
    return this.props.id + "-nav-item-id";
  }
  /** @hidden */
  componentDidMount() {
    var i;
    const s = this.tabStripRef.current, n = s && getComputedStyle(s).direction === "rtl" || !1;
    s && (this.navigation = new S({
      tabIndex: 0,
      root: this.tabStripRef,
      rovingTabIndex: !0,
      focusClass: "k-focus",
      selectors: [".k-tabstrip .k-tabstrip-item"],
      keyboardEvents: {
        keydown: {
          ArrowLeft: (t, e, r) => {
            r.preventDefault();
            const o = e.elements.indexOf(t), c = o !== 0 ? o - 1 : e.elements.length - 1, p = o !== e.elements.length - 1 ? o + 1 : 0;
            n ? (e.focusNext(t), this.onKeyboardSelect(p)) : (e.focusPrevious(t), this.onKeyboardSelect(c));
          },
          ArrowRight: (t, e, r) => {
            r.preventDefault();
            const o = e.elements.indexOf(t), c = o !== 0 ? o - 1 : e.elements.length - 1, p = o !== e.elements.length - 1 ? o + 1 : 0;
            n ? (e.focusPrevious(t), this.onKeyboardSelect(c)) : (e.focusNext(t), this.onKeyboardSelect(p));
          },
          ArrowDown: (t, e, r) => {
            r.preventDefault();
            const o = e.elements.indexOf(t), c = o !== e.elements.length - 1 ? o + 1 : 0;
            e.focusNext(t), this.onKeyboardSelect(c);
          },
          ArrowUp: (t, e, r) => {
            r.preventDefault();
            const o = e.elements.indexOf(t), c = o !== 0 ? o - 1 : e.elements.length - 1;
            e.focusPrevious(t), this.onKeyboardSelect(c);
          },
          Home: (t, e, r) => {
            r.preventDefault(), e.focusElement(e.first, t), this.onKeyboardSelect(0);
          },
          End: (t, e, r) => {
            r.preventDefault(), e.focusElement(e.last, t), this.onKeyboardSelect(e.elements.length - 1);
          }
        }
      }
    }), (i = this.navigation) == null || i.initializeRovingTab(this.props.selected));
  }
  /** @hidden */
  componentWillUnmount() {
    var s;
    (s = this.navigation) == null || s.removeFocusListener();
  }
  /**
   * @hidden
   */
  render() {
    const s = {
      ...this.props,
      children: this.children(),
      contentPanelId: this.contentPanelId,
      renderAllContent: this.props.renderAllContent,
      navItemId: this.navItemId,
      onKeyDown: this.onKeyDown,
      onSelect: this.onSelect
    }, { tabPosition: n, tabIndex: i } = s, t = n === "bottom", e = y(
      "k-tabstrip k-pos-relative",
      {
        "k-tabstrip-left": n === "left",
        "k-tabstrip-right": n === "right",
        "k-tabstrip-bottom": n === "bottom",
        "k-tabstrip-top": n === "top",
        "k-tabstrip-scrollable": this.props.scrollable
      },
      this.props.className
    );
    return /* @__PURE__ */ a.createElement(
      "div",
      {
        id: this.props.id,
        ref: this.tabStripRef,
        dir: this.props.dir,
        className: e,
        style: this.props.style
      },
      !t && /* @__PURE__ */ a.createElement(h, { ...s, tabIndex: i }),
      this.renderContent(s),
      t && /* @__PURE__ */ a.createElement(h, { ...s, tabIndex: i }),
      this.showLicenseWatermark && /* @__PURE__ */ a.createElement(x, null)
    );
  }
  children() {
    return a.Children.toArray(this.props.children).filter((s) => s);
  }
};
d.propTypes = {
  animation: l.bool,
  children: l.node,
  onSelect: l.func,
  selected: l.number,
  style: l.object,
  tabContentStyle: l.object,
  tabPosition: l.string,
  tabIndex: l.number,
  className: l.string,
  dir: l.string
}, d.defaultProps = {
  animation: !0,
  tabPosition: "top",
  keepTabsMounted: !1,
  buttonScrollSpeed: 100,
  mouseScrollSpeed: 10,
  renderAllContent: !1
};
let f = d;
export {
  f as TabStrip
};
