/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { getter as V } from "@progress/kendo-react-common";
const u = (r, f) => {
  const i = {};
  return r && r.length && r.forEach((g) => {
    i[f(g)] = !0;
  }), i;
}, E = (r, f) => {
  const {
    items: i,
    dataItemKey: g,
    value: a,
    subItemsField: x = "items",
    operation: w
  } = f, t = V(g), I = u(a, t);
  if (w === "clear")
    return [];
  if (w === "delete") {
    const n = u(i, t);
    return a.filter((e) => !n[t(e)]);
  }
  const G = i[0], C = t(G), d = V(x), h = [...r], c = [];
  let b = [], m;
  for (; h.length; ) {
    const n = h.pop();
    if (C === t(n)) {
      b = c.map((e) => e.item), m = n;
      break;
    } else {
      c && c.length && c[c.length - 1].parentPosition === h.length && c.pop();
      const e = d(n);
      e && e.length && (c.push({ item: n, parentPosition: h.length }), h.push(...e));
    }
  }
  const k = [...d(m) || []];
  let M = [];
  for (; k.length; ) {
    const n = k.pop();
    M.push(n);
    const e = d(n);
    e && e.length && k.push(...e);
  }
  const L = !I[C], l = [];
  if (L) {
    l.push(...a), l.push(m), l.push(...M.filter((s) => !I[t(s)]));
    const n = b.filter((s) => !I[t(s)]), e = u(l, t);
    for (let s = n.length - 1; s > -1; s--) {
      const p = n[s], o = d(p);
      if (o.filter((P) => e[t(P)]).length < o.length)
        break;
      l.push(p), e[t(p)] = !0;
    }
  } else {
    const n = t(m), e = u(M, t), s = u(b, t);
    l.push(
      ...a.filter((p) => {
        const o = t(p);
        return !e[o] && n !== o && !s[o];
      })
    );
  }
  return l;
};
export {
  E as getMultiSelectTreeValue,
  u as getValueMap
};
