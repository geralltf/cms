/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { getActiveElement as c } from "@progress/kendo-react-common";
import * as p from "react";
class g extends p.Component {
  constructor() {
    super(...arguments), this._input = null;
  }
  /**
   * @hidden
   */
  get input() {
    return this._input;
  }
  componentDidUpdate(t) {
    const i = t.value, a = t.suggestedText, { value: s, suggestedText: e, focused: n } = this.props, o = this.input, r = i !== s || e !== a, d = r && i.startsWith(s) && !(a && e && a.endsWith(e)), l = c(document);
    n && o && l !== o && o.focus(), e && r && !d && o && o.setSelectionRange(s.length - e.length, s.length);
  }
  render() {
    const { expanded: t = !1, disabled: i, role: a = "listbox", render: s } = this.props, e = /* @__PURE__ */ p.createElement(
      "input",
      {
        autoComplete: "off",
        id: this.props.id,
        type: "text",
        key: "searchbar",
        size: this.props.size,
        placeholder: this.props.placeholder,
        className: "k-input-inner",
        tabIndex: this.props.tabIndex,
        accessKey: this.props.accessKey,
        role: a,
        name: this.props.name,
        value: this.props.value,
        onChange: this.props.onChange,
        ref: (n) => this._input = n,
        onKeyDown: this.props.onKeyDown,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        onClick: this.props.onClick,
        "aria-disabled": i || void 0,
        disabled: i || void 0,
        readOnly: this.props.readOnly || void 0,
        title: this.props.title,
        "aria-haspopup": "listbox",
        "aria-expanded": t,
        "aria-owns": this.props.owns,
        "aria-activedescendant": t ? this.props.activedescendant : void 0,
        "aria-describedby": this.props.ariaDescribedBy,
        "aria-labelledby": this.props.ariaLabelledBy,
        "aria-required": this.props.ariaRequired
      }
    );
    return s ? s.call(void 0, e) : e;
  }
}
export {
  g as default
};
