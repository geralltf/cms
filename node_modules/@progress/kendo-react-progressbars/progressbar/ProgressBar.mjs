/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import a from "prop-types";
import { useAnimation as H } from "@progress/kendo-react-animation";
import { validatePackage as K, useRtl as q, classNames as I, getTabIndex as G } from "@progress/kendo-react-common";
import { truncateNumber as J, updateProgress as f, calculatePercentage as v } from "../common/utils.mjs";
import { usePrevious as Q } from "./hooks/usePrevious.mjs";
import { DEFAULT_ANIMATION_DURATION as X, NO_ANIMATION as Y } from "../common/constants.mjs";
import { packageMetadata as Z } from "../package-metadata.mjs";
const R = e.forwardRef((t, S) => {
  K(Z);
  const {
    animation: b = o.animation,
    disabled: g = o.disabled,
    reverse: C = o.reverse,
    orientation: A,
    labelVisible: T = o.labelVisible,
    labelPlacement: d,
    max: l = o.max,
    min: n = o.min,
    tabIndex: V,
    className: L,
    style: O,
    emptyStyle: h,
    emptyClassName: k,
    progressStyle: w,
    progressClassName: N
  } = t, i = e.useRef(null), c = e.useRef(null), m = e.useRef(null), U = e.useCallback(
    () => {
      i.current && i.current.focus();
    },
    []
  );
  e.useImperativeHandle(
    S,
    () => ({
      element: i.current,
      progressStatusElement: c.current,
      progressStatusWrapElement: m.current,
      focus: U
    })
  );
  const r = t.value || o.value, u = Q(r), y = t.value === null, D = q(i, t.dir), s = A === "vertical", M = J(r), _ = {
    value: r
  }, E = T ? t.label ? /* @__PURE__ */ e.createElement("span", { className: "k-progress-status" }, /* @__PURE__ */ e.createElement(t.label, { ..._ })) : /* @__PURE__ */ e.createElement("span", { className: "k-progress-status" }, M) : void 0, j = {
    className: I(
      "k-progressbar",
      {
        "k-progressbar-horizontal": !s,
        "k-progressbar-vertical": s,
        "k-progressbar-reverse": C,
        "k-progressbar-indeterminate": y,
        "k-disabled": g
      },
      L
    ),
    ref: i,
    dir: D,
    tabIndex: G(V, g),
    role: "progressbar",
    "aria-label": t.ariaLabel,
    "aria-valuemin": n,
    "aria-valuemax": l,
    "aria-valuenow": y ? void 0 : r,
    "aria-disabled": g,
    style: O
  }, P = I("k-progress-status-wrap", {
    "k-progress-start": d === "start",
    "k-progress-center": d === "center",
    "k-progress-end": d === "end" || d === void 0
  }), x = typeof b != "boolean" && b !== void 0 ? b.duration : b ? X : Y, B = e.useCallback(
    () => {
      const p = v(n, l, u);
      f(c, m, p, s);
    },
    [s, l, n, u]
  ), W = e.useCallback(
    (p) => {
      const F = v(n, l, u + (r - u) * p);
      f(c, m, F, s);
    },
    [n, l, u, r, s]
  ), z = e.useCallback(
    () => {
      const p = v(n, l, r);
      f(c, m, p, s);
    },
    [s, l, n, r]
  );
  return H(
    {
      duration: x,
      onStart: B,
      onUpdate: W,
      onEnd: z
    },
    [r, x]
  ), /* @__PURE__ */ e.createElement("div", { ...j }, /* @__PURE__ */ e.createElement("span", { className: P + (k ? " " + k : ""), style: h }, E), /* @__PURE__ */ e.createElement(
    "div",
    {
      className: "k-progressbar-value k-selected",
      style: w,
      ref: c
    },
    /* @__PURE__ */ e.createElement(
      "span",
      {
        className: P + (N ? " " + N : ""),
        ref: m
      },
      E
    )
  ));
});
R.propTypes = {
  animation: a.any,
  ariaLabel: a.string,
  disabled: a.bool,
  reverse: a.bool,
  label: a.any,
  labelVisible: a.bool,
  labelPlacement: a.oneOf(["start", "center", "end"]),
  max: a.number,
  min: a.number,
  value: a.number,
  tabIndex: a.number,
  emptyStyle: a.object,
  emptyClassName: a.string,
  progressStyle: a.object,
  progressClassName: a.string
};
const o = {
  animation: !1,
  min: 0,
  max: 100,
  value: 0,
  disabled: !1,
  reverse: !1,
  labelVisible: !0
};
R.displayName = "KendoProgressBar";
export {
  R as ProgressBar
};
