/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright © 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as i from "react";
import s from "prop-types";
import { cloneDate as p, weekInYear as w } from "@progress/kendo-date-math";
import { provideIntlService as D, registerForIntl as v } from "@progress/kendo-react-intl";
import { CalendarCell as g } from "./CalendarCell.mjs";
import { CalendarWeekCell as y } from "./CalendarWeekCell.mjs";
import { CalendarViewEnum as u } from "../models/CalendarViewEnum.mjs";
import { getToday as d, setTime as N } from "../../utils.mjs";
import { WeekNamesService as b } from "../services/WeekNamesService.mjs";
const k = (f) => /* @__PURE__ */ i.createElement("td", { key: f, className: "k-calendar-td k-empty" }, " "), c = class c extends i.Component {
  constructor() {
    super(...arguments), this.intl = null, this.weekService = null, this.buildWeekNumber = (t, e) => {
      if (!this.firstDate(t))
        return k(`week-cell-${e}`);
      const a = this.firstDate(t), n = this.getWeekNumber(a), o = `kendo-react-calendar-week-cell-${n}`, l = {
        className: "k-alt",
        value: n,
        firstDate: a,
        weekDays: t,
        onClick: this.handleWeekCellClick
      };
      return this.props.weekCell ? /* @__PURE__ */ i.createElement(this.props.weekCell, { ...l, key: o }, n) : /* @__PURE__ */ i.createElement(y, { ...l, key: o }, n);
    }, this.buildRow = (t) => t.map((e, r) => {
      if (!e)
        return k(r);
      const a = { "aria-selected": e.isSelected }, n = `kendo-react-calendar-cell-${e.value.getTime()}`, o = {
        ...a,
        ...e,
        isDisabled: !e.isInRange,
        view: this.props.activeView,
        showOtherMonthDays: this.props.showOtherMonthDays,
        allowReverse: this.props.allowReverse,
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      };
      return this.props.cell ? /* @__PURE__ */ i.createElement(this.props.cell, { ...o, key: n }, e.formattedValue) : /* @__PURE__ */ i.createElement(g, { ...o, key: n }, e.formattedValue);
    }), this.firstDate = (t) => {
      const e = this.firstWeekDateContext(t);
      return e ? e.value : null;
    }, this.firstWeekDateContext = (t) => {
      if (!this.weekNumber)
        return null;
      let e = 0, r = t[e];
      for (; !r && e < t.length; )
        r = t[++e];
      return r;
    }, this.handleClick = (t, e) => {
      const { onChange: r } = this.props;
      if (r && e) {
        const a = {
          value: p(t),
          target: this,
          nativeEvent: e && e.nativeEvent,
          syntheticEvent: e
        };
        r.call(void 0, a);
      }
    }, this.handleWeekCellClick = (t, e, r) => {
      const { onWeekSelect: a } = this.props, n = e.findIndex((o) => o && o.value === t);
      a && r && a.call(void 0, t, n, r);
    }, this.handleMouseEnter = (t) => {
      const { onCellEnter: e } = this.props;
      e && e.call(void 0, p(t));
    }, this.handleMouseLeave = (t) => {
      const { onCellLeave: e } = this.props;
      e && e.call(void 0, p(t));
    };
  }
  get min() {
    return this.props.min;
  }
  get max() {
    return this.props.max;
  }
  get isHorizontal() {
    return this.props.direction === "horizontal";
  }
  get isMonthView() {
    return this.props.activeView === u.month;
  }
  get weekNumber() {
    return !!(this.props.showWeekNumbers && this.props.activeView === u.month);
  }
  get selectedDate() {
    return this.props.selectedDate !== void 0 ? this.props.selectedDate : c.defaultProps.selectedDate;
  }
  render() {
    this.intl = D(this), this.weekService = new b(this.intl);
    const t = this.weekService.getWeekNames(this.weekNumber, this.props.weekDaysFormat), e = this.props.service.rowLength(this.weekNumber), r = this.props.service.title(this.props.viewDate), a = d(), n = N(this.props.viewDate, a), o = this.props.service.data({
      cellUID: this.props.cellUID,
      min: this.min,
      max: this.max,
      focusedDate: this.props.focusedDate,
      isActiveView: !this.props.bus.canMoveDown(this.props.activeView),
      selectedDate: this.selectedDate,
      selectionRange: this.props.selectionRange,
      viewDate: n
    });
    return /* @__PURE__ */ i.createElement(i.Fragment, null, this.isMonthView && this.isHorizontal && /* @__PURE__ */ i.createElement(
      "thead",
      {
        role: "rowgroup",
        className: "k-calendar-thead"
      },
      /* @__PURE__ */ i.createElement("tr", { role: "row", className: "k-calendar-tr" }, t.map((l, h) => /* @__PURE__ */ i.createElement("th", { key: h, className: "k-calendar-th" }, l)))
    ), /* @__PURE__ */ i.createElement(
      "tbody",
      {
        role: "rowgroup",
        className: "k-calendar-tbody"
      },
      !this.isHorizontal && /* @__PURE__ */ i.createElement("tr", { role: "presentation", className: "k-calendar-tr" }, /* @__PURE__ */ i.createElement(
        "th",
        {
          scope: "col",
          colSpan: e,
          className: "k-calendar-caption"
        },
        r
      )),
      o.map((l, h) => /* @__PURE__ */ i.createElement("tr", { role: "row", className: "k-calendar-tr", key: h }, this.weekNumber && this.buildWeekNumber(l, h), this.buildRow(l)))
    ));
  }
  getWeekNumber(t) {
    return !this.weekNumber || !this.intl ? null : w(t, this.intl.firstDay());
  }
};
c.propTypes = {
  activeRangeEnd: s.oneOf(["start", "end", null]),
  activeView: s.number.isRequired,
  cellUID: s.string.isRequired,
  direction: s.oneOf(["horizontal", "vertical"]),
  focusedDate: s.instanceOf(Date).isRequired,
  max: s.instanceOf(Date).isRequired,
  min: s.instanceOf(Date).isRequired,
  onChange: s.func,
  selectedDate: s.oneOfType(
    [s.instanceOf(Date), s.arrayOf(s.instanceOf(Date))]
  ),
  showWeekNumbers: s.bool,
  showOtherMonthDays: s.bool,
  viewDate: s.instanceOf(Date).isRequired
}, c.defaultProps = {
  direction: "vertical",
  selectedDate: d(),
  showWeekNumbers: !1
};
let m = c;
v(m);
export {
  m as View
};
