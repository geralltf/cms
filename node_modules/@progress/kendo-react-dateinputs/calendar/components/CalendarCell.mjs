/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import { classNames as C } from "@progress/kendo-react-common";
const N = (l, e) => {
  const t = Object.getOwnPropertyNames(l), a = Object.getOwnPropertyNames(e);
  if (t.length !== a.length)
    return !1;
  for (let n = 0; n < t.length; n++) {
    const o = t[n];
    if (l[o] !== e[o])
      return !1;
  }
  return !0;
};
class P extends r.Component {
  constructor() {
    super(...arguments), this.handleClick = (e) => {
      const { onClick: t, value: a } = this.props;
      t && t.call(void 0, a, e);
    }, this.handleMouseEnter = () => {
      const { onMouseEnter: e, value: t } = this.props;
      e && e.call(void 0, t);
    }, this.handleMouseLeave = () => {
      const { onMouseLeave: e, value: t } = this.props;
      e && e.call(void 0, t);
    };
  }
  // Manually checking if the component needs an update
  // due to date object being compared by instance
  // and new Date object is created
  // every time and fails the shallow compare of the React.PureComponent.
  /**
   * @hidden
   */
  shouldComponentUpdate(e) {
    const { value: t, ...a } = this.props, { value: n, ...o } = e;
    return !((!(t && n) || t.getTime() === n.getTime()) && N(a, o));
  }
  /* eslint-disable max-len */
  /**
   * @return
   * Returns a `<td />` element with a `<span className="k-link" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.
   */
  render() {
    const {
      className: e,
      formattedValue: t,
      isWeekend: a,
      isFocused: n,
      isInRange: o,
      isSelected: d,
      isRangeStart: i,
      isRangeMid: u,
      isRangeEnd: c,
      isRangeSplitStart: h,
      isRangeSplitEnd: m,
      isToday: g,
      isDisabled: k,
      view: w,
      value: y,
      isOtherMonth: s,
      showOtherMonthDays: v,
      allowReverse: p,
      ...E
    } = this.props, f = this.props.activeRangeEnd === "end" && c, M = this.props.activeRangeEnd === "start" && i, R = C(
      "k-calendar-td",
      {
        "k-range-start": !s && !p && i,
        "k-range-end": !s && !p && c,
        "k-range-mid": !s && u,
        "k-range-split-end": !s && m,
        "k-range-split-start": !s && h,
        "k-active": M || f,
        "k-state-pending-focus": n,
        "k-selected": !s && (d || i || c),
        "k-today": !s && g,
        "k-weekend": a,
        "k-disabled": k,
        "k-other-month": s
      },
      e
    );
    return !v && s ? /* @__PURE__ */ r.createElement("td", { role: "gridcell", className: "k-empty k-calendar-td" }) : /* @__PURE__ */ r.createElement(
      "td",
      {
        ...E,
        className: R,
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      },
      /* @__PURE__ */ r.createElement("span", { className: "k-link" }, this.props.children)
    );
  }
}
export {
  P as CalendarCell
};
