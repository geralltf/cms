/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as v from "react";
import s from "prop-types";
import { Keys as m, validatePackage as I, setScrollbarWidth as b, classNames as N, createPropsContext as E, withIdHOC as O, withPropsContext as P } from "@progress/kendo-react-common";
import { cloneDate as f, isEqualDate as D, getDate as c } from "@progress/kendo-date-math";
import { provideIntlService as A, registerForIntl as M } from "@progress/kendo-react-intl";
import { packageMetadata as L } from "../../package-metadata.mjs";
import { ViewList as B } from "./ViewList.mjs";
import { Navigation as T } from "./Navigation.mjs";
import { CalendarViewEnum as h } from "../models/CalendarViewEnum.mjs";
import { getToday as y, dateInRange as w, viewInRange as S, MIN_DATE as F, MAX_DATE as K, isInRange as C } from "../../utils.mjs";
import { BusViewService as _ } from "../services/BusViewService.mjs";
import { DOMService as $ } from "../services/DOMService.mjs";
import { NavigationService as R } from "../services/NavigationService.mjs";
import { ScrollSyncService as U } from "../services/ScrollSyncService.mjs";
const V = (u) => u ? u.virtualization : null, k = (u = d.defaultProps.min, o = d.defaultProps.max, i, t) => t !== void 0 ? t !== null && C(c(t), u, o) ? t : null : i !== null && C(c(i), u, o) ? i : null, r = class r extends v.Component {
  constructor(o) {
    super(o), this.scrollSyncService = null, this.focusedDate = null, this.Navigation = null, this.calendarViewList = null, this._element = null, this.intl = null, this.service = null, this.isActive = !1, this.didNavigationChange = !1, this.focus = () => {
      this._element && this._element.focus();
    }, this.shouldScroll = () => this.didNavigationChange, this.handleScroll = (t) => {
      this.scrollSyncService && this.scrollSyncService.sync(
        V(this.Navigation),
        V(this.calendarViewList),
        t
      );
    }, this.handleNavigationChange = (t) => {
      if (this.props.disabled)
        return;
      this.didNavigationChange = !0;
      const e = f(t.value);
      this.setState({ focusedDate: e });
    }, this.handleViewChange = ({ view: t }) => {
      this.scrollSyncService && this.scrollSyncService.configure(t), this.setState({ activeView: t });
    }, this.handleDateChange = (t) => {
      const e = f(t.value), a = f(t.value), p = this.bus.canMoveDown(this.state.activeView);
      if (this.props.disabled)
        return;
      if (p)
        if (t.isTodayClick)
          this.bus.moveToBottom(this.state.activeView);
        else {
          this.bus.moveDown(this.state.activeView, t.syntheticEvent), this.setState({ focusedDate: a });
          return;
        }
      this.setState({ value: e, focusedDate: a }), this.valueDuringOnChange = e;
      const { onChange: l } = this.props;
      if (l) {
        const n = {
          syntheticEvent: t.syntheticEvent,
          nativeEvent: t.nativeEvent,
          value: e,
          target: this
        };
        l.call(void 0, n);
      }
      this.valueDuringOnChange = void 0;
    }, this.handleFocus = (t) => {
      if (this.isActive = !0, !this.calendarViewList)
        return;
      this.calendarViewList.focusActiveDate();
      const { onFocus: e } = this.props;
      e && e.call(void 0, t);
    }, this.handleBlur = (t) => {
      if (this.isActive = !1, !this.calendarViewList)
        return;
      this.calendarViewList.blurActiveDate();
      const { onBlur: e } = this.props;
      e && e.call(void 0, t);
    }, this.handleKeyDown = (t) => {
      const { keyCode: a, ctrlKey: p, metaKey: l } = t;
      if (!(!this.focusedDate || !this.service)) {
        if (a === 84 && this.setState({ focusedDate: y() }), (p || l) && (a === m.left || a === m.right)) {
          if (this.props.disabled)
            return;
          this.didNavigationChange = !0, this.focusedDate.getDate() === 31 && this.focusedDate.setDate(30);
          const n = a === m.left ? this.focusedDate.getMonth() - 1 : this.focusedDate.getMonth() + 1, g = new Date(this.focusedDate.setMonth(n)), x = f(g);
          this.setState({ focusedDate: x });
        }
        if (a === m.enter) {
          if (this.value !== null && D(this.focusedDate, this.value)) {
            const g = w(this.focusedDate, this.min, this.max);
            V(this.calendarViewList).scrollToIndex(this.service.skip(g, this.min));
          }
          const n = {
            syntheticEvent: t,
            nativeEvent: t.nativeEvent,
            value: this.focusedDate,
            target: this
          };
          this.handleDateChange(n);
        } else {
          const n = w(
            this.navigation.move(
              this.focusedDate,
              this.navigation.action(t),
              this.state.activeView,
              this.service,
              t
            ),
            this.min,
            this.max
          );
          if (D(this.focusedDate, n))
            return;
          this.setState({ focusedDate: n });
        }
        t.preventDefault();
      }
    }, this.handleMouseDown = (t) => {
      t.preventDefault();
    }, this.handleClick = (t) => {
      this._element && this._element.focus({ preventScroll: !0 });
    }, I(L);
    const i = k(
      this.min,
      this.max,
      this.props.defaultValue || r.defaultProps.defaultValue,
      this.props.value
    );
    this.state = {
      value: i,
      activeView: S(
        h[o.defaultActiveView],
        this.bottomView,
        this.topView
      ),
      focusedDate: w(
        o.focusedDate || i || y(),
        this.min,
        this.max
      )
    }, this.dom = new $(), this.bus = new _(this.handleViewChange), this.navigation = new R(this.bus), this.oldValue = i;
  }
  get cellUID() {
    return this.props.id + "-cell-uid";
  }
  get id() {
    return this.props.id + "-id";
  }
  /**
   * Gets the wrapping element of the Calendar.
   */
  get element() {
    return this._element;
  }
  /**
   * Gets the value of the Calendar.
   */
  get value() {
    return this.valueDuringOnChange !== void 0 ? this.valueDuringOnChange : this.props.value !== void 0 ? this.props.value : this.state.value;
  }
  get min() {
    return c(this.props.min !== void 0 ? this.props.min : r.defaultProps.min);
  }
  get max() {
    return c(this.props.max !== void 0 ? this.props.max : r.defaultProps.max);
  }
  get bottomView() {
    return h[this.props.bottomView !== void 0 ? this.props.bottomView : r.defaultProps.bottomView];
  }
  get topView() {
    return h[this.props.topView !== void 0 ? this.props.topView : r.defaultProps.topView];
  }
  /**
   * @hidden
   */
  componentDidMount() {
    Promise.resolve().then(() => {
      b(), this._element && (this.dom.calculateHeights(this._element), this.scrollSyncService = new U(this.dom), this.scrollSyncService.configure(this.state.activeView), this.forceUpdate());
    });
  }
  /**
   * @hidden
   */
  componentDidUpdate(o, i) {
    b(), i.activeView !== this.state.activeView && this.scrollSyncService && this.scrollSyncService.configure(this.state.activeView), this.calendarViewList && (this.isActive ? this.calendarViewList.focusActiveDate : this.calendarViewList.blurActiveDate)(), this.didNavigationChange = !1, this.isActive && (this.oldValue = this.value);
  }
  /**
   * @hidden
   */
  render() {
    this.props._ref && this.props._ref(this);
    const o = this.value !== null && this.oldValue !== null ? !D(this.value, this.oldValue) : this.value !== this.oldValue, i = S(
      this.state.activeView,
      h[this.props.bottomView !== void 0 ? this.props.bottomView : r.defaultProps.bottomView],
      h[this.props.topView !== void 0 ? this.props.topView : r.defaultProps.topView]
    ), t = k(this.min, this.max, this.value, this.value), e = t ? c(t) : null;
    this.focusedDate = c(w(
      o && t !== null ? t : this.state.focusedDate,
      this.min,
      this.max
    )), this.intl = A(this), this.bus.configure(this.bottomView, this.topView), this.service = this.bus.service(i, this.intl);
    const { smoothScroll: a = Number.parseFloat(v.version) < 18 } = this.props, p = N(
      "k-calendar k-calendar-infinite",
      {
        "k-disabled": this.props.disabled,
        "k-week-number": this.props.weekNumber
      },
      this.props.mobileMode ? "k-calendar-lg" : "k-calendar-md",
      this.props.className
    ), l = [this.props.navigation && /* @__PURE__ */ v.createElement(
      T,
      {
        key: 0,
        ref: (n) => {
          this.Navigation = n;
        },
        activeView: this.state.activeView,
        focusedDate: this.focusedDate,
        min: this.min,
        max: this.max,
        onScroll: this.handleScroll,
        onChange: this.handleNavigationChange,
        service: this.service,
        dom: this.dom,
        navigationItem: this.props.navigationItem,
        tabIndex: this.props.tabIndex
      }
    ), /* @__PURE__ */ v.createElement(
      B,
      {
        key: 1,
        ref: (n) => {
          this.calendarViewList = n;
        },
        activeView: this.state.activeView,
        focusedDate: this.focusedDate,
        min: this.min,
        max: this.max,
        bus: this.bus,
        shouldScroll: this.shouldScroll,
        onScroll: this.handleScroll,
        service: this.service,
        cell: this.props.cell,
        weekCell: this.props.weekCell,
        dom: this.dom,
        smoothScroll: a,
        showWeekNumbers: this.props.weekNumber,
        onChange: this.handleDateChange,
        value: e,
        cellUID: this.cellUID,
        headerTitle: this.props.headerTitle,
        header: this.props.header,
        tabIndex: this.props.tabIndex,
        weekDaysFormat: this.props.weekDaysFormat,
        showOtherMonthDays: this.props.showOtherMonthDays
      }
    )];
    return /* @__PURE__ */ v.createElement(
      "div",
      {
        ref: (n) => {
          this._element = n;
        },
        className: p,
        id: this.props.id || this.id,
        "aria-labelledby": this.props.ariaLabelledBy,
        "aria-describedby": this.props.ariaDescribedBy,
        "aria-disabled": this.props.disabled,
        tabIndex: this.props.disabled ? void 0 : this.props.tabIndex || 0,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleMouseDown,
        onClick: this.handleClick
      },
      l
    );
  }
};
r.displayName = "Calendar", r.propTypes = {
  className: s.string,
  defaultActiveView: s.oneOf(["month", "year", "decade", "century"]),
  defaultValue: s.instanceOf(Date),
  disabled: s.bool,
  focusedDate: s.instanceOf(Date),
  id: s.string,
  ariaLabelledBy: s.string,
  ariaDescribedBy: s.string,
  weekDaysFormat: s.oneOf(["short", "abbreviated", "narrow"]),
  max: s.instanceOf(Date),
  min: s.instanceOf(Date),
  navigation: s.bool,
  smoothScroll: s.bool,
  onBlur: s.func,
  onChange: s.func,
  onFocus: s.func,
  tabIndex: s.number,
  value: s.instanceOf(Date),
  weekNumber: s.bool,
  topView: (o, i, t) => {
    const e = o[i], a = o.bottomView;
    return e && a && h[e] < h[a] ? new Error(
      `Invalid prop + ${i} suplied to ${t}.
                    ${i} can not be smaller than bottomView.
                    `
    ) : null;
  },
  bottomView: (o, i, t) => {
    const e = o[i], a = o.topView;
    return e && a && h[e] > h[a] ? new Error(
      `Invalid prop + ${i} suplied to ${t}.
                    ${i} can not be bigger than topView.
                    `
    ) : null;
  }
}, r.defaultProps = {
  disabled: !1,
  min: F,
  max: K,
  weekDaysFormat: "short",
  navigation: !0,
  defaultActiveView: "month",
  defaultValue: null,
  topView: "century",
  bottomView: "month",
  showOtherMonthDays: !1
};
let d = r;
const Y = E(), z = O(P(Y, d));
z.displayName = "KendoReactCalendar";
M(d);
export {
  z as Calendar,
  Y as CalendarPropsContext,
  d as CalendarWithoutContext
};
