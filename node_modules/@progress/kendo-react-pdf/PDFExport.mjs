/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as o from "react";
import e from "prop-types";
import { drawDOM as s, exportPDF as i } from "@progress/kendo-drawing";
import { saveAs as a } from "@progress/kendo-file-saver";
import { getPageMargin as p } from "./getPageMargin.mjs";
import g from "./KendoDrawingAdapter.mjs";
import { validatePackage as m } from "@progress/kendo-react-common";
import { packageMetadata as l } from "./package-metadata.mjs";
const t = class t extends o.Component {
  constructor(r) {
    super(r), this.rootElForPDF = null, m(l);
  }
  /**
   * @hidden
   */
  render() {
    return /* @__PURE__ */ o.createElement("div", { ref: (r) => {
      this.rootElForPDF = r;
    } }, this.props.children);
  }
  /**
   * Saves the content as a PDF file.
   *
   * @param callback - The callback to be executed after the PDF is saved.
   */
  save(r) {
    new g(
      s,
      i,
      a,
      this.rootElForPDF,
      this.getOptions()
    ).savePDF(r);
  }
  getOptions() {
    return Object.assign({}, this.props, { margin: p(this.props) });
  }
};
t.propTypes = {
  author: e.string,
  avoidLinks: e.oneOfType([e.bool, e.string]),
  forcePageBreak: e.string,
  keepTogether: e.string,
  creator: e.string,
  date: e.instanceOf(Date),
  imageResolution: e.number,
  fileName: e.string,
  forceProxy: e.bool,
  keywords: e.string,
  landscape: e.bool,
  margin: e.oneOfType([e.string, e.number, e.shape({
    left: e.oneOfType([e.number, e.string]),
    top: e.oneOfType([e.number, e.string]),
    right: e.oneOfType([e.number, e.string]),
    bottom: e.oneOfType([e.number, e.string])
  })]),
  pageTemplate: e.any,
  paperSize: e.any,
  repeatHeaders: e.bool,
  scale: e.number,
  proxyData: e.any,
  proxyURL: e.string,
  proxyTarget: e.string,
  producer: e.string,
  subject: e.string,
  title: e.string
};
let n = t;
export {
  n as PDFExport
};
