/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { Keys as K, classNames as L, IconWrap as T } from "@progress/kendo-react-common";
import { useTableKeyboardNavigation as z } from "@progress/kendo-react-data-tools";
import { useLocalization as P } from "@progress/kendo-react-intl";
import { caretAltDownIcon as W, caretAltLeftIcon as F, caretAltRightIcon as G } from "@progress/kendo-svg-icons";
import * as t from "react";
import { messages as H, groupCollapse as j, groupExpand as q } from "../messages/index.mjs";
const V = (e) => {
  let c = null;
  const { columnIndex: a, level: s, columnsCount: m, rowType: w, dataItem: n, field: D, onChange: r, expanded: o, render: C, dataIndex: f, ariaColumnIndex: N, isRtl: v } = e, d = D || "", x = z(e.id), S = P();
  let i = null, g = null, y = null;
  const M = t.useCallback(
    (l) => {
      l.isDefaultPrevented() || l.keyCode === K.enter && r && (l.preventDefault(), r({
        dataItem: n,
        dataIndex: f,
        syntheticEvent: l,
        field: void 0,
        value: !o
      }));
    },
    [o, r, n, f]
  ), k = t.useCallback((l) => {
    e.onContextMenu && e.onContextMenu.call(void 0, l, e.dataItem, e.field);
  }, [e.onContextMenu, e.dataItem, e.field]), b = (l, R) => {
    const E = o ? j : q, A = S.toLanguageString(E, H[E]);
    return i = {
      className: "k-table-td",
      style: { ...e.style, ...R },
      colSpan: l,
      key: "g-colspan",
      role: "gridcell",
      "aria-selected": !1,
      "aria-expanded": o,
      "aria-colindex": N,
      onKeyDown: M,
      onContextMenu: k,
      ...x
    }, y = /* @__PURE__ */ t.createElement("p", { className: "k-reset" }, /* @__PURE__ */ t.createElement(
      "a",
      {
        onClick: (h) => {
          h.preventDefault(), r && r({
            dataItem: n,
            dataIndex: f,
            syntheticEvent: h,
            field: void 0,
            value: !o
          });
        },
        href: "#",
        tabIndex: -1,
        "aria-label": A
      },
      /* @__PURE__ */ t.createElement(
        T,
        {
          name: o ? "caret-alt-down" : v ? "caret-alt-left" : "caret-alt-right",
          icon: o ? W : v ? F : G
        }
      )
    ), n[d] instanceof Date && n[d].toString ? n[d].toString() : n[d]), /* @__PURE__ */ t.createElement(
      "td",
      {
        ...i,
        key: i.key
      },
      y
    );
  };
  a === void 0 || s === void 0 || a < s || m === void 0 || w !== "groupHeader" || n[d] === void 0 ? (i = {
    style: e.style,
    key: "g" + a,
    className: L(
      "k-table-td",
      "k-group-cell",
      { "k-grid-content-sticky": e.locked }
    ),
    role: "gridcell",
    onContextMenu: k,
    ...x
  }, c = /* @__PURE__ */ t.createElement(
    "td",
    {
      ...i,
      key: i.key
    }
  )) : a <= s && !e.locked ? c = b(m - a, {}) : a <= s && e.locked && (g = {
    className: "k-table-td",
    role: "gridcell",
    colSpan: m - a,
    style: { borderLeftWidth: 0, borderRightWidth: 0 },
    onContextMenu: k
  }, c = /* @__PURE__ */ t.createElement(t.Fragment, null, b(0, { position: "sticky", zIndex: 2 }), /* @__PURE__ */ t.createElement(
    "td",
    {
      ...g
    }
  )));
  const I = e.rowType || "data", u = e.cells;
  if (u && u.group && u.group[I]) {
    const l = u.group[I];
    return /* @__PURE__ */ t.createElement(l, { ...e, tdProps: i, td2Props: g }, y);
  }
  return C ? C.call(void 0, c, e) : c;
};
export {
  V as GridGroupCell
};
