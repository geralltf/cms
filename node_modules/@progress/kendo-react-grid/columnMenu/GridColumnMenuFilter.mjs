/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import { isCompositeFilterDescriptor as y } from "@progress/kendo-data-query";
import { GridColumnMenuItem as T } from "./GridColumnMenuItem.mjs";
import { GridColumnMenuItemGroup as w } from "./GridColumnMenuItemGroup.mjs";
import { GridColumnMenuItemContent as z } from "./GridColumnMenuItemContent.mjs";
import { provideLocalizationService as N, registerForLocalization as H } from "@progress/kendo-react-intl";
import { getFilterType as L, getDefaultOperator as R, IsUnaryFilter as c, operatorMap as m, booleanFilterValues as j, filterLogicList as q, defaultHideSecondFilter as A } from "../filterCommon.mjs";
import { filterTitle as b, messages as g, filterSubmitButton as D, filterClearButton as M } from "../messages/index.mjs";
import { GridColumnMenuFilterUI as J } from "./GridColumnMenuFilterUI.mjs";
import { Button as k } from "@progress/kendo-react-buttons";
import { filterIcon as K } from "@progress/kendo-svg-icons";
const C = (h) => h || { filters: [], logic: "and" }, u = (h, i) => C(i).filters.filter((t) => y(t) ? t.filters && t.filters.length && t.filters.length <= 2 && !t.filters.find((r) => y(r) || r.field !== h) : !1)[0] || null, v = class v extends a.Component {
  constructor(i) {
    super(i), this.removeGroup = (e, t) => {
      const r = [...t.filters], s = r.findIndex((l) => l === e);
      return s > -1 && r.splice(s, 1), {
        ...t,
        filters: r
      };
    }, this.insertGroup = (e, t) => ({
      ...t,
      filters: [
        e,
        ...t.filters
      ]
    }), this.isControlled = () => this.props.expanded !== void 0, this.onFilterExpand = () => {
      const e = this.isControlled(), t = !(e ? this.props.expanded : this.state.expanded);
      this.props.onExpandChange && this.props.onExpandChange(t), e || this.setState({
        expanded: t
      });
    }, this.firstFilterChange = (e) => {
      this.filterChange(0, e);
    }, this.secondFilterChange = (e) => {
      this.filterChange(1, e);
    }, this.filterChange = (e, t) => {
      const r = this.state.filterGroup.filters.map((s, l) => l === e ? {
        ...s,
        value: t.value,
        operator: t.operator
      } : s);
      this.setState({
        filterGroup: {
          ...this.state.filterGroup,
          filters: r
        }
      });
    }, this.logicChange = (e) => {
      this.setState({
        filterGroup: {
          ...this.state.filterGroup,
          logic: e.target.value.operator
        }
      });
    }, this.clear = (e) => {
      if (e.preventDefault(), !this.props.onFilterChange)
        return;
      const t = this.props.column.field, r = C(this.props.filter), s = u(t, this.props.filter), l = r.filters.filter((n) => n !== s);
      l.length ? this.props.onFilterChange({ ...r, filters: l }, e) : this.props.onFilterChange(null, e), this.props.onCloseMenu && this.props.onCloseMenu();
    }, this.currentFilterGroup = () => ({
      ...this.state.filterGroup,
      filters: this.state.filterGroup.filters.filter((e) => e.value !== void 0 && e.value !== null && e.value !== "" || e.value === null && e.operator)
    }), this.submit = (e) => {
      if (e.preventDefault(), !this.props.onFilterChange)
        return;
      const t = this.props.column.field, r = C(this.props.filter), s = u(t, this.props.filter), l = this.currentFilterGroup();
      let n = null;
      if (s && l.filters.length > 0) {
        const f = r.filters.map((p) => p === s ? l : p);
        n = {
          ...r,
          filters: f
        };
      } else if (l.filters.length === 0) {
        const f = r.filters.filter((p) => p !== s);
        f.length && (n = {
          ...r,
          filters: f
        });
      } else
        n = {
          ...r,
          filters: [...r.filters, l]
        };
      this.props.onFilterChange(n, e), this.props.onCloseMenu && this.props.onCloseMenu();
    };
    let o;
    if (i.column && i.column.field) {
      const e = L(i.column.filter), t = R(i.filterOperators, e);
      o = u(i.column.field, i.filter), o = o ? {
        ...o,
        filters: o.filters.map((r) => ({ ...r }))
      } : {
        logic: "and",
        filters: [
          { field: i.column.field, operator: t, value: c(t) ? null : void 0 },
          { field: i.column.field, operator: t, value: c(t) ? null : void 0 }
        ]
      }, o.filters.filter((r) => r.field === i.column.field).length === 1 && o.filters.splice(1, 0, { field: i.column.field, operator: t });
    }
    this.state = {
      expanded: i.expanded || !1,
      filterGroup: o
    };
  }
  /**
   * @hidden
   */
  render() {
    const { column: i, filterUI: o, hideSecondFilter: e, filterOperators: t } = this.props;
    if (!i || !i.field)
      return /* @__PURE__ */ a.createElement("div", null);
    const r = L(i.filter), s = e !== void 0 ? e : A[r], l = N(this), n = this.state.filterGroup.filters, f = m(t[r], l), p = m(j, l), O = {
      field: i.field,
      value: n[0].value,
      operator: n[0].operator,
      operators: f,
      booleanValues: p,
      onChange: this.firstFilterChange,
      filterType: r
    }, P = {
      field: i.field,
      value: n[1].value,
      operator: n[1].operator,
      operators: f,
      booleanValues: p,
      onChange: this.secondFilterChange,
      filterType: r
    }, G = this.state.filterGroup.logic, x = m(q, l), d = {
      value: x.find((B) => B.operator === (G === null ? "" : G)),
      onChange: this.logicChange,
      data: x
    }, E = o, S = {
      firstFilterProps: O,
      secondFilterProps: P,
      logicData: d.data,
      logicValue: d.value,
      onLogicChange: d.onChange,
      hideSecondFilter: s
    }, U = this.currentFilterGroup().filters.length !== 0 || c(n[0].operator) || c(n[1].operator), V = this.isControlled() ? this.props.expanded : this.state.expanded, I = this.props.alwaysExpand;
    return /* @__PURE__ */ a.createElement(w, null, !I && /* @__PURE__ */ a.createElement(
      T,
      {
        title: l.toLanguageString(b, g[b]),
        iconClass: "k-i-filter",
        svgIcon: K,
        onClick: this.onFilterExpand
      }
    ), /* @__PURE__ */ a.createElement(z, { show: I || !!V }, /* @__PURE__ */ a.createElement(
      "form",
      {
        className: "k-filter-menu",
        onSubmit: this.submit,
        onReset: this.clear
      },
      /* @__PURE__ */ a.createElement("div", { className: "k-filter-menu-container" }, E ? /* @__PURE__ */ a.createElement(E, { ...S }) : /* @__PURE__ */ a.createElement(J, { ...S }), /* @__PURE__ */ a.createElement("div", { className: "k-actions k-actions-stretched" }, /* @__PURE__ */ a.createElement(
        k,
        {
          themeColor: "primary",
          disabled: !U
        },
        l.toLanguageString(D, g[D])
      ), /* @__PURE__ */ a.createElement(
        k,
        {
          type: "reset"
        },
        l.toLanguageString(M, g[M])
      )))
    )));
  }
};
v.active = (i, o) => !!u(i, o);
let F = v;
H(F);
export {
  F as GridColumnMenuFilter,
  u as filterGroupByField,
  C as rootFilterOrDefault
};
