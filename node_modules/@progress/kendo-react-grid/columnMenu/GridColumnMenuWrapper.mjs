/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { Popup as x } from "@progress/kendo-react-popup";
import { TABBABLE_ELEMENTS as z, Navigation as A, IconWrap as v, getActiveElement as F, Keys as L } from "@progress/kendo-react-common";
import { moreVerticalIcon as W } from "@progress/kendo-svg-icons";
import { columnMenu as M, messages as V } from "../messages/index.mjs";
import { useLocalization as _ } from "@progress/kendo-react-intl";
const H = [
  ".k-columnmenu-item-content",
  ".k-filter-menu-container"
].map((o) => z.map(
  (u) => `${o} ${u}`
)), P = [
  [".k-tabstrip-items"],
  [".k-columnmenu-item"],
  ...H
], U = (o) => {
  const [u, E] = t.useState(!1), l = t.useRef(null), s = t.useRef(null), r = t.useRef(null), a = t.useRef(0), { columnMenu: h, ...k } = o, { column: g, columnMenuIcon: i } = o, b = _(), w = g.title || g.field, p = w ? `${w} ` : "", y = "#", C = (e) => {
    const n = F(document);
    clearTimeout(a.current), a.current = window.setTimeout(() => {
      n && e.relatedTarget !== l.current && s.current && !s.current.contains(n) && m();
    });
  }, D = () => {
    clearTimeout(a.current);
  }, T = (e) => {
    e.preventDefault(), u && o.onCloseMenu && o.onCloseMenu(), E(!u);
  }, m = () => {
    o.onCloseMenu && o.onCloseMenu(), E(!1), !o.navigatable && l.current && l.current.focus();
  }, S = (e) => {
    var n;
    if (e.keyCode === L.tab) {
      const c = e.target, d = c && ((n = c.closest(".k-grid")) == null ? void 0 : n.getElementsByClassName("k-grid-content")[0]);
      d && d.scrollWidth > d.clientWidth && c.scrollIntoView({ inline: "center" });
    }
  }, f = t.useMemo(() => o.show !== void 0 ? o.show : u, [o.show, u]), K = (e) => {
    var n;
    (n = r.current) == null || n.triggerKeyboardEvent(e);
  }, B = (e) => {
    var n;
    (n = r.current) == null || n.triggerMouseEvent(e);
  }, I = (e, n, c) => {
    c.preventDefault(), c.shiftKey ? n.focusPrevious(e) : n.focusNext(e);
  }, N = (e, n, c) => {
    e && e.click();
  }, R = (e, n, c) => {
    c.preventDefault(), m();
  }, $ = (e, n, c) => {
    c.preventDefault(), n.focusElement(e);
  };
  return t.useEffect(() => (f && s.current && (r.current = new A({
    tabIndex: 0,
    root: s,
    selectors: P,
    keyboardEvents: {
      keydown: {
        Tab: I,
        Enter: N,
        Escape: R
      }
    },
    mouseEvents: {
      mousedown: $
    }
  }), r.current.focusElement(r.current.first, null)), () => {
    r.current && (r.current = null);
  }), [f]), /* @__PURE__ */ t.createElement(t.Fragment, null, /* @__PURE__ */ t.createElement(
    "a",
    {
      className: "k-grid-header-menu k-grid-column-menu",
      ref: l,
      onClick: T,
      onKeyDown: S,
      href: y,
      tabIndex: o.navigatable ? -1 : void 0,
      "aria-label": `${p}${b.toLanguageString(M, V[M])}`
    },
    i ? /* @__PURE__ */ t.createElement(v, { name: i.name, icon: i }) : /* @__PURE__ */ t.createElement(v, { name: "more-vertical", icon: W })
  ), /* @__PURE__ */ t.createElement(
    x,
    {
      anchor: l.current,
      show: f,
      popupClass: "k-column-menu k-column-menu-popup k-grid-columnmenu-popup"
    },
    /* @__PURE__ */ t.createElement(
      "div",
      {
        ref: s,
        onBlur: C,
        onFocus: D,
        onMouseDown: B,
        onKeyDown: K,
        style: { outline: "none" }
      },
      h && /* @__PURE__ */ t.createElement(
        h,
        {
          ...k,
          onCloseMenu: m
        }
      )
    )
  ));
};
export {
  U as GridColumnMenuWrapper
};
