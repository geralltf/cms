/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import { TextBox as N, InputPrefix as x, Checkbox as d } from "@progress/kendo-react-inputs";
import { IconWrap as y } from "@progress/kendo-react-common";
import { searchIcon as v } from "@progress/kendo-svg-icons";
import { Button as C } from "@progress/kendo-react-buttons";
const M = (l) => {
  const [o, k] = t.useState(""), r = l.columns.reduce((e, n) => ({ ...e, [n.id || ""]: !!l.columnsState.find((a) => a.id === n.id) }), {}), [c, i] = t.useState(r), h = t.useMemo(() => l.columns.filter((e) => {
    var n;
    return (n = e.title || e.field) == null ? void 0 : n.toLowerCase().includes(o.toLowerCase());
  }), [l.columns, o]), f = t.useCallback(() => {
    const e = l.columns.filter((n) => c[n.id || ""]);
    l.onColumnsChange.call(void 0, e), l.onCloseMenu.call(void 0);
  }, [c, l.columns, l.onColumnsChange, l.onCloseMenu]), E = () => {
    i(r);
  }, s = t.useMemo(() => Object.values(c).filter((e) => e).length, [c]), m = t.useMemo(() => s === l.columns.length, [l.columns, s]), b = t.useCallback(() => {
    const e = { ...c };
    Object.keys(e).forEach((n, a) => e[n] = m && a === 0 ? !0 : !m), i(e);
  }, [c, m]), g = t.useCallback((e, n) => {
    const a = { ...c };
    a[n || ""] = e, i(a);
  }, [c]), S = (e) => {
    k(String(e.target.value));
  };
  return /* @__PURE__ */ t.createElement("form", { className: "k-filter-menu" }, /* @__PURE__ */ t.createElement("div", { className: "k-filter-menu-container" }, /* @__PURE__ */ t.createElement(
    N,
    {
      className: "k-searchbox",
      value: o,
      onChange: S,
      prefix: () => /* @__PURE__ */ t.createElement(x, null, /* @__PURE__ */ t.createElement(y, { name: "search", icon: v }))
    }
  ), /* @__PURE__ */ t.createElement("ul", { className: "k-reset k-multicheck-wrap" }, !o && /* @__PURE__ */ t.createElement("li", { className: "k-item k-check-all-wrap" }, /* @__PURE__ */ t.createElement(
    d,
    {
      checked: m,
      onChange: b,
      label: "(Select all)"
    }
  )), h.map((e, n) => /* @__PURE__ */ t.createElement("li", { key: e.id, className: "k-item" }, /* @__PURE__ */ t.createElement(
    d,
    {
      disabled: c[e.id || ""] && s === 1,
      checked: c[e.id || ""],
      onChange: (a) => {
        var u;
        return g(!!((u = a.target.element) != null && u.checked), e.id);
      },
      label: e.title || e.field
    }
  )))), /* @__PURE__ */ t.createElement("div", { className: "k-filter-selected-items" }, s, " selected items"), /* @__PURE__ */ t.createElement("div", { className: "k-actions k-actions-start k-actions-horizontal" }, /* @__PURE__ */ t.createElement(C, { type: "button", themeColor: "primary", onClick: f }, "Apply"), /* @__PURE__ */ t.createElement(C, { type: "button", onClick: E }, "Reset"))));
};
M.displayName = "GridColumnMenuColumnsList";
export {
  M as GridColumnMenuColumnsList
};
