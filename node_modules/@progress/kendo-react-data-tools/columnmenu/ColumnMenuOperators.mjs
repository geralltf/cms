/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { columnMenuFilterContainsOperator as n, columnMenuFilterNotContainsOperator as a, columnMenuFilterEqOperator as t, columnMenuFilterNotEqOperator as e, columnMenuFilterStartsWithOperator as l, columnMenuFilterEndsWithOperator as u, columnMenuFilterIsNullOperator as r, columnMenuFilterIsNotNullOperator as o, columnMenuFilterIsEmptyOperator as p, columnMenuFilterIsNotEmptyOperator as i, columnMenuFilterGteOperator as s, columnMenuFilterGtOperator as c, columnMenuFilterLteOperator as x, columnMenuFilterLtOperator as m, columnMenuFilterAfterOrEqualOperator as O, columnMenuFilterAfterOperator as M, columnMenuFilterBeforeOperator as F, columnMenuFilterBeforeOrEqualOperator as q, columnMenuFilterIsTrue as g } from "../messages/index.mjs";
const E = [
  { text: n, operator: "contains" },
  { text: a, operator: "doesnotcontain" },
  { text: t, operator: "eq" },
  { text: e, operator: "neq" },
  { text: l, operator: "startswith" },
  { text: u, operator: "endswith" },
  { text: r, operator: "isnull" },
  { text: o, operator: "isnotnull" },
  { text: p, operator: "isempty" },
  { text: i, operator: "isnotempty" }
], N = [
  { text: t, operator: "eq" },
  { text: e, operator: "neq" },
  { text: s, operator: "gte" },
  { text: c, operator: "gt" },
  { text: x, operator: "lte" },
  { text: m, operator: "lt" },
  { text: r, operator: "isnull" },
  { text: o, operator: "isnotnull" }
], d = [
  { text: t, operator: "eq" },
  { text: e, operator: "neq" },
  { text: O, operator: "gte" },
  { text: M, operator: "gt" },
  { text: F, operator: "lt" },
  { text: q, operator: "lte" },
  { text: r, operator: "isnull" },
  { text: o, operator: "isnotnull" }
], f = [
  { text: g, operator: "" }
];
class y {
  /**
   * An array containing the operators for the ColumnMenuTextFilter component.
   *
   * The operators are:
   *
   * - { text: 'columnMenu.filterContainsOperator', operator: 'contains' }
   * - { text: 'columnMenu.filterNotContainsOperator', operator: 'doesnotcontain' }
   * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }
   * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }
   * - { text: 'columnMenu.filterStartsWithOperator', operator: 'startswith' }
   * - { text: 'columnMenu.filterEndsWithOperator', operator: 'endswith' }
   * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }
   * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }
   * - { text: 'columnMenu.filterIsEmptyOperator', operator: 'isempty' }
   * - { text: 'columnMenu.filterIsNotEmptyOperator', operator: 'isnotempty' }
   */
  static get text() {
    return [...E];
  }
  /**
   * An array containing the operators for the ColumnMenuNumericFilter component.
   *
   * The operators are:
   *
   * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }
   * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }
   * - { text: 'columnMenu.filterGteOperator', operator: 'gte' }
   * - { text: 'columnMenu.filterGtOperator', operator: 'gt' }
   * - { text: 'columnMenu.filterLteOperator', operator: 'lte' }
   * - { text: 'columnMenu.filterLtOperator', operator: 'lt' }
   * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }
   * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }
   */
  static get numeric() {
    return [...N];
  }
  /**
   * An array containing the operators for the ColumnMenuDateFilter component.
   *
   * The operators are:
   *
   * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }
   * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }
   * - { text: 'columnMenu.filterAfterOrEqualOperator', operator: 'gte' }
   * - { text: 'columnMenu.filterAfterOperator', operator: 'gt' }
   * - { text: 'columnMenu.filterBeforeOperator', operator: 'lt' }
   * - { text: 'columnMenu.filterBeforeOrEqualOperator', operator: 'lte' }
   * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }
   * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }
   */
  static get date() {
    return [...d];
  }
  /**
   * An array containing the operators for the ColumnMenuBooleanFilter component.
   *
   * The operators are:
   *
   * - { text: 'columnMenu.filterIsTrue', operator: '' }
   */
  static get boolean() {
    return [...f];
  }
}
export {
  y as ColumnMenuOperators
};
