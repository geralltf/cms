/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as i from "react";
import r from "prop-types";
import { validatePackage as p, classNames as c } from "@progress/kendo-react-common";
import { Group as h } from "./Group.mjs";
import { packageMetadata as u } from "../package-metadata.mjs";
const a = class a extends i.Component {
  constructor(s) {
    super(s), this.onFilterChange = (e) => {
      const t = {
        filter: e.nextFilter,
        syntheticEvent: e.syntheticEvent,
        nativeEvent: e.nativeEvent,
        target: this
      };
      this.props.onChange.call(void 0, t);
    }, this.onGroupRemove = (e) => {
      const t = {
        filter: { ...this.props.value, filters: [] },
        syntheticEvent: e.syntheticEvent,
        nativeEvent: e.nativeEvent,
        target: this
      };
      this.props.onChange.call(void 0, t);
    }, p(u);
  }
  /**
   * @hidden
   */
  render() {
    return /* @__PURE__ */ i.createElement(
      "div",
      {
        className: c(
          "k-filter",
          this.props.className
        ),
        style: this.props.style
      },
      /* @__PURE__ */ i.createElement("ul", { role: "tree", className: "k-filter-container", "aria-label": this.props.ariaLabel }, /* @__PURE__ */ i.createElement("li", { role: "treeitem", className: "k-filter-group-main" }, /* @__PURE__ */ i.createElement(
        h,
        {
          filter: this.props.value,
          fields: this.props.fields,
          ariaLabel: this.props.ariaLabelGroup,
          ariaLabelExpression: this.props.ariaLabelExpression,
          onChange: this.onFilterChange,
          onRemove: this.onGroupRemove,
          defaultGroupFilter: this.props.defaultGroupFilter || { logic: "and", filters: [] }
        }
      )))
    );
  }
};
a.propTypes = {
  className: r.string,
  style: r.object,
  fields: function(s, e) {
    const t = s[e];
    if (t === void 0)
      return new Error(`Property '${e}' is missing.`);
    if (Array.isArray(t)) {
      if (Object.keys(t.reduce((o, l) => ({ ...o, [l.name]: 1 }), {})).length !== t.length)
        return new Error(`Property '${e}' needs to contain objects with unique 'name' field.`);
    } else
      return new Error(`Property '${e}' needs to be Array<FieldSettings>.`);
    return null;
  },
  ariaLabelGroup: r.string,
  ariaLabelExpression: r.string,
  value: r.object.isRequired,
  onChange: r.func.isRequired
};
let n = a;
export {
  n as Filter
};
