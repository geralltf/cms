/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright © 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import { Button as p } from "@progress/kendo-react-buttons";
import { classNames as c } from "@progress/kendo-react-common";
import { filterIcon as h, filterClearIcon as f } from "@progress/kendo-svg-icons";
const v = (l) => class extends a.Component {
  constructor() {
    super(...arguments), this.filterChange = (t) => {
      this.props.onFilterChange && this.props.onFilterChange(t);
    }, this.inputChange = (t) => {
      const i = t.target.value, { filter: r = [], field: e = "" } = this.props, n = this.findCellFilter(), s = n ? r.map((o) => o.field === e ? { ...n, value: i } : o) : [...r, { ...l.emptyFilter, value: i, field: e }];
      this.filterChange({
        filter: s,
        field: e,
        syntheticEvent: t.syntheticEvent
      });
    }, this.operatorChange = (t) => {
      const { operator: i } = t.target.value, { filter: r = [], field: e = "" } = this.props, n = this.findCellFilter(), s = n ? r.map((o) => o.field === e ? { ...n, operator: i } : o) : [...r, { ...l.emptyFilter, field: e, operator: i }];
      this.filterChange({
        filter: s,
        field: e,
        syntheticEvent: t.syntheticEvent
      });
    }, this.clearButtonClick = (t) => {
      const { filter: i = [], field: r = "" } = this.props;
      this.filterChange({
        filter: i.filter((e) => e.field !== r),
        field: r,
        syntheticEvent: t
      });
    }, this.findCellFilter = () => {
      const { filter: t = [], field: i } = this.props;
      return t.find((r) => r.field === i);
    };
  }
  render() {
    const { clearButtonTitle: t = "", operators: i = [] } = this.props, r = this.findCellFilter() || { ...l.emptyFilter, operator: "" }, { operator: e, value: n } = r, s = {
      ariaLabel: "filter",
      value: i.find((o) => o.operator === e) || null,
      onChange: this.operatorChange,
      className: "k-dropdown-operator",
      iconClassName: "k-i-filter",
      svgIcon: h,
      data: i,
      textField: "text",
      popupSettings: { width: "" },
      components: this.props.components
    };
    return /* @__PURE__ */ a.createElement("div", { className: "k-filtercell" }, /* @__PURE__ */ a.createElement("span", null, l.inputComponent({
      value: n,
      onChange: this.inputChange,
      components: this.props.components,
      ariaLabel: this.props.ariaLabel,
      min: this.props.min,
      max: this.props.max
    }), /* @__PURE__ */ a.createElement("div", { className: "k-filtercell-operator" }, l.operatorComponent(s, this.props), " ", /* @__PURE__ */ a.createElement(
      p,
      {
        className: c({
          "k-clear-button-visible": !(n === null || n === "") || e
        }),
        title: t,
        type: "button",
        onClick: this.clearButtonClick,
        icon: "filter-clear",
        svgIcon: f,
        disabled: !(!(n === null || n === "") || e)
      }
    ))));
  }
};
export {
  v as createFilterComponent
};
